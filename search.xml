<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>杭电多校6</title>
      <link href="/undefined/16571.html"/>
      <url>/undefined/16571.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>牛客多校6</title>
      <link href="/undefined/63651.html"/>
      <url>/undefined/63651.html</url>
      
        <content type="html"><![CDATA[<h2 id="G-Gcd"><a href="#G-Gcd" class="headerlink" title="G Gcd"></a><a href="https://ac.nowcoder.com/acm/contest/57360/G">G Gcd</a></h2><p>算法tag：gcd，裴蜀定理</p><p>题意：给定一个包含两个初始数字$x,y$的set，每次可以选择两个不同的数字，将他们作差放入set，或者取他们gcd的绝对值放入set，求是否能通过若干次操作获得$z$。</p><p>解法：由裴蜀定理易得，$x,y$若干次操作后可以得到$gcd(x,y)$的任意倍数，所以只要判断z是否为$gcd(x,y)$的倍数即可。由于本体认为$gcd(a,0)=a$，所以需要特判$z=0$时，是否存在$x=0 或 y=0$，</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> x,y,z;</span><br><span class="line">cin&gt;&gt;x&gt;&gt;y&gt;&gt;z;</span><br><span class="line"><span class="type">int</span> a=__gcd(x,y);</span><br><span class="line"><span class="keyword">if</span>(z%a||(z==<span class="number">0</span>&amp;&amp;x*y!=<span class="number">0</span>)) cout&lt;&lt;<span class="string">&quot;NO\n&quot;</span>;</span><br><span class="line"><span class="keyword">else</span> cout&lt;&lt;<span class="string">&quot;YES\n&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="E-Sequence"><a href="#E-Sequence" class="headerlink" title="E Sequence"></a><a href="https://ac.nowcoder.com/acm/contest/57360/E">E Sequence</a></h2><p>算法tag：前缀和</p><p>题意：给n个数字，q次询问，每次询问给定$l,r,k$，问是否能$[l,r]$分为$k$块，每块的和都是偶数。</p><p>解法：记录前缀和，判断前缀和的奇偶数性，再次记录奇偶性的前缀和，每次先判断l和r是否有相同的奇偶性，然后检查和lr对应位置奇偶性相同的前缀和序列，pre?[r]-pre?[l-1]是否大于等于k即可。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> n,q;</span><br><span class="line">cin&gt;&gt;n&gt;&gt;q;</span><br><span class="line">pre[<span class="number">0</span>]=<span class="number">0</span>; pre0[<span class="number">0</span>]=<span class="number">0</span>; pre1[<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line"><span class="built_in">rep</span>(i,<span class="number">1</span>,n)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> x;</span><br><span class="line">cin&gt;&gt;x;</span><br><span class="line">pre[i]=pre[i<span class="number">-1</span>]^(x&amp;<span class="number">1</span>);</span><br><span class="line">pre0[i]=pre0[i<span class="number">-1</span>]+(pre[i]==<span class="number">0</span>);</span><br><span class="line">pre1[i]=pre1[i<span class="number">-1</span>]+(pre[i]==<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(q--)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> l,r,k;</span><br><span class="line">cin&gt;&gt;l&gt;&gt;r&gt;&gt;k;</span><br><span class="line"><span class="keyword">if</span>(pre[r]!=pre[l<span class="number">-1</span>])&#123;cout&lt;&lt;<span class="string">&quot;NO\n&quot;</span>;<span class="keyword">continue</span>;&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(pre[r]%<span class="number">2</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>((pre1[r]-pre1[l<span class="number">-1</span>]) &gt;=k)&#123;cout&lt;&lt;<span class="string">&quot;YES\n&quot;</span>;<span class="keyword">continue</span>;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>((pre0[r]-pre0[l<span class="number">-1</span>]) &gt;=k)&#123;cout&lt;&lt;<span class="string">&quot;YES\n&quot;</span>;<span class="keyword">continue</span>;&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;NO\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="C-idol"><a href="#C-idol" class="headerlink" title="C idol!!"></a><a href="https://ac.nowcoder.com/acm/contest/57360/C">C idol!!</a></h2><p>算法tag：数学，等比数列，等差数列求和</p><p>题意：定义双阶乘为相邻两项之间公差为2的阶乘，例如$5!!=1<em>3</em>5$,$6!!=2<em>4</em>6$,给定n，求$1!!<em>2!!</em>3!!<em>…</em>n!!$末尾0的个数。</p><p>解法1：易得末尾0的个数等于分解质因子后因子中5的个数，(因为10=2*5，显然2的数量远大于5的数量，所以只要考虑5即可)。</p><p>双阶乘比较抽象，我们可以先将双阶乘转换为我们熟悉的阶乘，容易发现$(n)!!*(n+1)!!=(n+1)!$。</p><p>对于奇数，转换为$\prod_{i=1}^{n/2}(2i)!$</p><p>对于偶数，转换为$\prod_{i=1}^{(n+1)/2}(2i-1)!$</p><p>先考虑求$n!$中末尾0的个数，找到小于等于n的最大的$5^k$,对于$5^i$,$n!$中至少有$[n/(5^i)]$个乘积存在$i$个5因子，求和得到$\sum_{i=1}^k[n/(5^i)]$</p><p>解法2：先不考虑$5^2$的情况，单纯考虑包含几个5，易得答案为首相为5，公差为5的等差数列（每5个数进行考虑）</p><p>接下来在等差数列的基础上，考虑$5^2,5^3…$考虑包含几个$5^2$,易得首相为25，公差为5的等差数列（每25个数进行考虑）</p><p>同理，适用与所有5的幂次。</p><p>只要求出每个对应的5的幂次第一次出现的位置，然后用n减去这个位置，就能知道对应的个数。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> int128 __int128_t</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">(int128 x)</span></span>&#123;</span><br><span class="line">     <span class="keyword">if</span>(x&lt;<span class="number">0</span>)x=-x,<span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>);</span><br><span class="line">     <span class="keyword">if</span>(x&gt;<span class="number">9</span>)<span class="built_in">print</span>(x/<span class="number">10</span>);</span><br><span class="line">     <span class="built_in">putchar</span>(x%<span class="number">10</span>+<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">int128 <span class="title">sub</span><span class="params">(int128 n,int128 k)</span></span>&#123;</span><br><span class="line">    int128 cur=<span class="number">1</span>,w=<span class="number">1</span>,ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">        w*=<span class="number">5</span>;</span><br><span class="line">        cur=cur*<span class="number">5</span>-k;<span class="comment">//k=2表示偶数情况下，第一个5出现的位置比奇数情况下晚了两个位置</span></span><br><span class="line">        <span class="keyword">if</span>(cur&gt;n) <span class="keyword">break</span>;</span><br><span class="line">        int128 cnt=(n-cur+<span class="number">1</span>)/w;<span class="comment">//等差数列求和</span></span><br><span class="line">        int128 sum=(n-cur+<span class="number">1</span>)%w;<span class="comment">//多余项单独处理</span></span><br><span class="line">        ans+=w*(<span class="number">1</span>+cnt)*cnt/<span class="number">2</span>;</span><br><span class="line">        ans+=(cnt+<span class="number">1</span>)*sum;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    int128 ans=<span class="number">0</span>;</span><br><span class="line">    ans+=<span class="built_in">sub</span>(n/<span class="number">2</span>,<span class="number">0</span>);</span><br><span class="line">    ans+=<span class="built_in">sub</span>((n+<span class="number">1</span>)/<span class="number">2</span>,<span class="number">2</span>);</span><br><span class="line">    <span class="built_in">print</span>(ans);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="B-Distance"><a href="#B-Distance" class="headerlink" title="B Distance"></a><a href="https://ac.nowcoder.com/acm/contest/57360/B">B Distance</a></h2><p>算法tag：范德蒙德卷积公式，排列组合</p><p>题意：定义两个multiset之间的距离为 让A中所有元素和B中所有元素相等的最小操作次数，每次操作可以将A或B中的一个数字加一。如果无法通过操作使得A变成B，那么距离为0。</p><p>现给定两个长度为n的集合S和T，求所有S的子集和所有T的子集的距离之和。（只要位置不同就算作不同的子集，{1,1}的子集有{1(第一个)}，{1(第二个)},{1,1}）</p><p>解法：显然只有长度相等的集和才能计算其距离，每两个集合的距离可以考虑先将所有元素排序，然后将对应位置的数做差取绝对值，再进行求和。</p><p>先对S和T排序。</p><p>显然从S中取一个数，从T中取一个数，这两个数对他们所在的子集的贡献已知，那么我们只要知道这两个数字会在产生多少次贡献即可。复杂度为$n^2$</p><p>如何求共贡献次数？</p><p>考虑S前i个数字和T前j个数选出相同个数的方案数为$f_{i,j}$,令$i&lt;=j$,则</p><p>$\begin{aligned}f<em>{i, j} &amp; =\sum</em>{k=1}^{i}\left(\begin{array}{l}i \k\end{array}\right)\left(\begin{array}{l}j \k\end{array}\right) \&amp; =\sum_{k=1}^{i}\left(\begin{array}{c}i \i-k\end{array}\right)\left(\begin{array}{l}j \k\end{array}\right)=\left(\begin{array}{c}i+j \i\end{array}\right)\end{aligned}$</p><p>（范德蒙德卷积公式）</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">int</span> maxn=<span class="number">4e3</span>+<span class="number">10</span>;<span class="comment">//因为会有i+j所以要开到4e3</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> a[N],b[N];</span><br><span class="line"><span class="type">int</span> fac[N];</span><br><span class="line"><span class="type">int</span> inv[N];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">fac[<span class="number">0</span>] = inv[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">fac[<span class="number">1</span>] = inv[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">2</span>; i &lt;= maxn - <span class="number">9</span>; ++i)<span class="comment">// 一定要从2开始</span></span><br><span class="line">fac[i] = fac[i<span class="number">-1</span>] * i % mod,</span><br><span class="line">inv[i] = (mod - mod / i) * inv[mod % i] % mod;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= maxn - <span class="number">9</span>; ++i)</span><br><span class="line">inv[i] = inv[i] * inv[i<span class="number">-1</span>] % mod;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">C</span><span class="params">(ll n, ll m)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(m &gt; n) <span class="keyword">return</span> <span class="number">0ll</span>;</span><br><span class="line"><span class="keyword">return</span> fac[n] * inv[m] % mod * inv[n-m] % mod;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line">cin&gt;&gt;n;</span><br><span class="line"><span class="built_in">rep</span>(i,<span class="number">1</span>,n)</span><br><span class="line">&#123;</span><br><span class="line">cin&gt;&gt;a[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">rep</span>(i,<span class="number">1</span>,n)</span><br><span class="line">&#123;</span><br><span class="line">cin&gt;&gt;b[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">sort</span>(a+<span class="number">1</span>,a+<span class="number">1</span>+n);</span><br><span class="line"><span class="built_in">sort</span>(b+<span class="number">1</span>,b+<span class="number">1</span>+n);</span><br><span class="line"><span class="type">int</span> ans=<span class="number">0</span>;</span><br><span class="line"><span class="built_in">rep</span>(i,<span class="number">1</span>,n)</span><br><span class="line"><span class="built_in">rep</span>(j,<span class="number">1</span>,n)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> ii=i<span class="number">-1</span>;</span><br><span class="line"><span class="type">int</span> jj=j<span class="number">-1</span>;</span><br><span class="line"><span class="type">int</span> x=n-i;</span><br><span class="line"><span class="type">int</span> y=n-j;</span><br><span class="line">ans=(ans+<span class="built_in">abs</span>(a[i]-b[j])*<span class="built_in">C</span>(ii+jj,<span class="built_in">min</span>(ii,jj))%mod*<span class="built_in">C</span>(x+y,<span class="built_in">min</span>(x,y))%mod )%mod;</span><br><span class="line">&#125;</span><br><span class="line">cout&lt;&lt;ans&lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="A-Tree"><a href="#A-Tree" class="headerlink" title="A Tree"></a><a href="https://ac.nowcoder.com/acm/contest/57360/A">A Tree</a></h2><p>算法tag：kruskal重构树，树上dp，启发式合并</p><p>题意：一颗树上有若干个点，每个点有对应的颜色$color_i$（黑或白，用1或0表示），你可以支付$cost_i$来翻转这个点的颜色。</p><p>定义两个点之间的$val(x,y)$为$x$到$y$的最短路的边权最大值。</p><p>所有不同颜色节点之间的val为earning，求earing-cost的最大值。</p><p>解法：用dp数组记录当前点集合中的有i个白点时的最大价值，初始化黑点对应的价值为$-cost_i$，每次合并转移的的代价为$dp[new][i]=max(dp[u][i]+dp[v][i-k]+w(i<em>(size(v)-i-k)+(size[u])-i)</em>(i-k))$</p><p>利用kruskal重构树，保证每次合并不会对两个集合内已有的点造成影响，即新边不会成为原有的两个集合中黑点和白点之间的最短路。</p><p>利用启发式合并，每次将较大部分合并到较小部分，尽可能降低树高。来提高合并的速度。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> a[N];</span><br><span class="line"><span class="type">int</span> cost[N];</span><br><span class="line"><span class="type">int</span> f[N];</span><br><span class="line"><span class="type">int</span> siz[N];</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; dp[N];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x==f[x]) <span class="keyword">return</span> x;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> f[x]=<span class="built_in">find</span>(f[x]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">merge</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> v,<span class="type">int</span> w)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    u=<span class="built_in">find</span>(u);</span><br><span class="line">    v=<span class="built_in">find</span>(v);</span><br><span class="line">    <span class="keyword">if</span>(u==v)<span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">if</span>(siz[u]&gt;siz[v]) <span class="built_in">swap</span>(u,v);</span><br><span class="line">    <span class="type">int</span> n=dp[u].<span class="built_in">size</span>()<span class="number">-1</span>;</span><br><span class="line">    <span class="type">int</span> m=dp[v].<span class="built_in">size</span>()<span class="number">-1</span>;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt;<span class="built_in">tmp</span>(n+m+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> &amp;x:tmp)</span><br><span class="line">    &#123;</span><br><span class="line">        x=-inf;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">rep</span>(i,<span class="number">0</span>,n+m)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">rep</span>(j,<span class="number">0</span>,n)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(i-j&lt;=m&amp;&amp;i&gt;=j)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="type">int</span> k=i-j;</span><br><span class="line">                <span class="type">int</span> cnt=j*(m-k)+(n-j)*k;</span><br><span class="line">                tmp[i]=<span class="built_in">max</span>(tmp[i],dp[u][j]+dp[v][k]+cnt*w);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    dp[v]=tmp;</span><br><span class="line">    dp[u].<span class="built_in">clear</span>();</span><br><span class="line">    f[u]=v;</span><br><span class="line">    siz[v]+=siz[u];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">edge</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> u;</span><br><span class="line">    <span class="type">int</span> v;</span><br><span class="line">    <span class="type">int</span> w;</span><br><span class="line">&#125;b[N];</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">cmp</span><span class="params">(edge x,edge y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x.w&lt;y.w;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    <span class="built_in">rep</span>(i,<span class="number">1</span>,n)</span><br><span class="line">    &#123;</span><br><span class="line">        cin&gt;&gt;a[i];</span><br><span class="line">        f[i]=i;</span><br><span class="line">        siz[i]=<span class="number">1</span>;</span><br><span class="line">        dp[i].<span class="built_in">resize</span>(<span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    <span class="built_in">rep</span>(i,<span class="number">1</span>,n)</span><br><span class="line">    &#123;</span><br><span class="line">        cin&gt;&gt;cost[i];</span><br><span class="line">        dp[i][a[i]^<span class="number">1</span>]=-cost[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">rep</span>(i,<span class="number">1</span>,n<span class="number">-1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> u,v,w;</span><br><span class="line">        cin&gt;&gt;u&gt;&gt;v&gt;&gt;w;</span><br><span class="line">        b[i].u=u;</span><br><span class="line">        b[i].v=v;</span><br><span class="line">        b[i].w=w;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">sort</span>(b+<span class="number">1</span>,b+n,cmp);</span><br><span class="line">    <span class="built_in">rep</span>(i,<span class="number">1</span>,n<span class="number">-1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">merge</span>(b[i].u,b[i].v,b[i].w);</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    <span class="type">int</span> x=<span class="built_in">find</span>(<span class="number">1</span>);</span><br><span class="line">     </span><br><span class="line">    cout&lt;&lt;*<span class="built_in">max_element</span>(dp[x].<span class="built_in">begin</span>(),dp[x].<span class="built_in">end</span>())&lt;&lt;<span class="string">&quot;\n&quot;</span>;    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 牛客多校 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>杭电多校5</title>
      <link href="/undefined/16891.html"/>
      <url>/undefined/16891.html</url>
      
        <content type="html"><![CDATA[<h2 id="1001-Typhoon"><a href="#1001-Typhoon" class="headerlink" title="1001  Typhoon"></a><a href="http://acm.hdu.edu.cn/showproblem.php?pid=7324">1001  Typhoon</a></h2><p>题意：给定台风的路径（用$m$个点表示$m-1$条线段）和n个避难所的坐标，求每个点到台风的最短距离。</p><p>解法：暴力枚举每个坐标到每条边的最小值。</p><p>启示：你也许需要一个计算几何的板子orz</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Point</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="type">double</span> x,y;</span><br><span class="line">    <span class="built_in">Point</span>(<span class="type">double</span> x=<span class="number">0</span>,<span class="type">double</span> y=<span class="number">0</span>):<span class="built_in">x</span>(x),<span class="built_in">y</span>(y) &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//向量加法</span></span><br><span class="line">    Point <span class="keyword">operator</span>+(Point p)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Point</span>(x+p.x,y+p.y);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//向量减法</span></span><br><span class="line">    Point <span class="keyword">operator</span>-(Point p)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Point</span>(x-p.x,y+p.y);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//向量伸缩</span></span><br><span class="line">    Point <span class="keyword">operator</span>*(<span class="type">double</span> a)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Point</span>(x*a,y*a);</span><br><span class="line">    &#125;</span><br><span class="line">    Point <span class="keyword">operator</span>/(<span class="type">double</span> a)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Point</span>(x/a,y/a);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//向量大小</span></span><br><span class="line">    <span class="function"><span class="type">double</span> <span class="title">abs</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">sqrt</span>(<span class="built_in">norm</span>());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//向量范数</span></span><br><span class="line">    <span class="function"><span class="type">double</span> <span class="title">norm</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> x*x+y*y;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">bool</span> <span class="keyword">operator</span>&lt;(<span class="type">const</span> Point &amp;p) <span class="type">const</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> x!=p.x?x&lt;p.x:y&lt;p.y;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">bool</span> <span class="keyword">operator</span>==(<span class="type">const</span> Point &amp;p)<span class="type">const</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> x-p.x&lt;<span class="number">1e-10</span>&amp;&amp;y-p.y&lt;<span class="number">1e-10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> Point Vector;</span><br><span class="line"></span><br><span class="line"><span class="comment">//向量内积</span></span><br><span class="line"><span class="function"><span class="type">double</span> <span class="title">dot</span><span class="params">(Vector a,Vector b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a.x*b.x+a.y*b.y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//向量外积</span></span><br><span class="line"><span class="function"><span class="type">double</span> <span class="title">cross</span><span class="params">(Vector a,Vector b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">abs</span>(a.x*b.y-a.y*b.x);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//正交</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">isOrthogonal</span><span class="params">(Vector a,Vector b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a.x*b.x+a.y*b.y==<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//平行</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">isParallel</span><span class="params">(Vector a,Vector b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a.x*b.y-a.y*b.x==<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//投影</span></span><br><span class="line"><span class="function">Point <span class="title">project</span><span class="params">(Point a,Point b,Point c)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">Vector <span class="title">ab</span><span class="params">(b.x-a.x,b.y-a.y)</span></span>;</span><br><span class="line">    <span class="function">Vector <span class="title">ac</span><span class="params">(c.x-a.x,c.y-a.y)</span></span>;</span><br><span class="line">    <span class="type">double</span>  r=<span class="built_in">dot</span>(ab,ac)/ab.<span class="built_in">norm</span>();<span class="comment">//比例</span></span><br><span class="line">    <span class="function">Vector <span class="title">h</span><span class="params">(ab*r)</span></span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Point</span>(a.x+h.x,a.y+h.y);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//映象</span></span><br><span class="line"></span><br><span class="line"><span class="function">Point <span class="title">reflect</span><span class="params">(Point a,Point b,Point c)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//c到ab的投影点</span></span><br><span class="line">    Point r=<span class="built_in">project</span>(a,b,c);</span><br><span class="line">    <span class="function">Vector <span class="title">cr</span><span class="params">(r.x-c.x,r.y-c.y)</span></span>;</span><br><span class="line">    <span class="comment">//cr扩大二倍</span></span><br><span class="line">    Vector cr_2=cr*<span class="number">2</span>;<span class="comment">//上面重载过*</span></span><br><span class="line">    <span class="comment">//向量加法</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Point</span>(c.x+cr_2.x,c.y+cr_2.y);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//两点间距离</span></span><br><span class="line"><span class="function"><span class="type">double</span> <span class="title">getDistancePP</span><span class="params">(Point a,Point b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">Point <span class="title">c</span><span class="params">(b.x-a.x,b.y-a.y)</span></span>;</span><br><span class="line">    <span class="keyword">return</span>  c.<span class="built_in">abs</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//点到直线距离(利用外积平行四边形)</span></span><br><span class="line"><span class="function"><span class="type">double</span> <span class="title">getDistancePL</span><span class="params">(Point a,Point b,Point c)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">Vector <span class="title">ab</span><span class="params">(b.x-a.x,b.y-a.y)</span></span>;</span><br><span class="line">    <span class="function">Vector <span class="title">ac</span><span class="params">(c.x-a.x,c.y-a.y)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">cross</span>(ab,ac)/ab.<span class="built_in">abs</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//点到线段距离</span></span><br><span class="line"><span class="function"><span class="type">double</span> <span class="title">getDistancePS</span><span class="params">(Point a,Point b,Point c)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//定义4个向量</span></span><br><span class="line">    <span class="function">Vector <span class="title">ab</span><span class="params">(b.x-a.x,b.y-a.y)</span></span>;</span><br><span class="line">    <span class="function">Vector <span class="title">ba</span><span class="params">(a.x-b.x,a.y-b.y)</span></span>;</span><br><span class="line">    <span class="function">Vector <span class="title">ac</span><span class="params">(c.x-a.x,c.y-a.y)</span></span>;</span><br><span class="line">    <span class="function">Vector <span class="title">bc</span><span class="params">(c.x-b.x,c.y-b.y)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">dot</span>(ab,ac)&lt;<span class="number">0.0</span>) <span class="keyword">return</span> <span class="built_in">getDistancePP</span>(a,c);</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">dot</span>(ba,bc)&lt;<span class="number">0.0</span>) <span class="keyword">return</span> <span class="built_in">getDistancePP</span>(b,c);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">getDistancePL</span>(a,b,c);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n, m;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;m, &amp;n);</span><br><span class="line">    vector&lt;Point&gt; P, S;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; i ++)&#123;</span><br><span class="line">        <span class="type">int</span> x, y;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;x, &amp;y);</span><br><span class="line">        P.<span class="built_in">push_back</span>(<span class="built_in">Point</span>(x, y));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</span><br><span class="line">        <span class="type">int</span> x, y;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;x, &amp;y);</span><br><span class="line">        S.<span class="built_in">push_back</span>(<span class="built_in">Point</span>(x, y));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">vector&lt;<span class="type">double</span>&gt; <span class="title">ans</span><span class="params">(n + <span class="number">5</span>, <span class="number">1.0</span> * <span class="number">1e14</span>)</span></span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i ++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j &lt; m - <span class="number">1</span>; j ++)&#123;</span><br><span class="line">            <span class="comment">// cout &lt;&lt; S[j].x &lt;&lt; &quot; &quot; &lt;&lt; S[j].y &lt;&lt; endl;</span></span><br><span class="line">            <span class="type">double</span> now = <span class="built_in">getDistancePS</span>(P[j], P[j + <span class="number">1</span>], S[i]);</span><br><span class="line">            <span class="comment">// cout &lt;&lt; now &lt;&lt; endl;</span></span><br><span class="line">            ans[i] = <span class="built_in">min</span>(ans[i], now);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i ++) <span class="built_in">printf</span>(<span class="string">&quot;%.4lf\n&quot;</span>, ans[i]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1006-Touhou-Red-Red-Blue"><a href="#1006-Touhou-Red-Red-Blue" class="headerlink" title="1006 Touhou Red Red Blue"></a><a href="http://acm.hdu.edu.cn/showproblem.php?pid=7329">1006 Touhou Red Red Blue</a></h2><p>题意：每次给一个ufo，每个ufo有不同的颜色，可以选择取或不取，如果取，遵循以下规则：</p><p>1.如果bag1为空，放进bag1</p><p>2.如果bag1非空，bag2空，放进bag2</p><p>3.如果bag1和bag2都非空，则</p><p>​    1）如果三种物品颜色全部相同，将他们全部消去，并获得一个自定义颜色的ufo在bag1中，分数+1。</p><p>​    2）如果三种物品颜色全部不同，将他们全部消去，获得两个自定义颜色的ufo在bag1和bag2中。</p><p>​    3）否则，将bag1中的物品移除，将bag2中的物品放入bag1，将现有物品放入bag2。</p><p>解法：dp。初始化全部计为负无穷，考虑只取1，只取2和12都取的情况，初始化为0。</p><p>​        每次先从上一状态完整继承下来，表示当前位置不取的情况。</p><p>​        更新三种颜色相同的情况，此时颜色可以为三种中的任意，所以对三种都进行更新。</p><p>​        更新3种以当前颜色结尾的情况，即上述3）。</p><p>​        更新三种颜色不同的情况，将所有包含两种颜色的情况更新。</p><p>最后枚举$n$位置上所有可能的情况即可。</p><p>另外此题可以贪心。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> dp[N][<span class="number">15</span>];</span><br><span class="line"><span class="comment">//1  10 </span></span><br><span class="line"><span class="comment">//2  20</span></span><br><span class="line"><span class="comment">//3  30</span></span><br><span class="line"><span class="comment">//4  11</span></span><br><span class="line"><span class="comment">//5  12</span></span><br><span class="line"><span class="comment">//6  13</span></span><br><span class="line"><span class="comment">//7  21</span></span><br><span class="line"><span class="comment">//8  22</span></span><br><span class="line"><span class="comment">//9  23</span></span><br><span class="line"><span class="comment">//10 31</span></span><br><span class="line"><span class="comment">//11 32</span></span><br><span class="line"><span class="comment">//12 33</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">string s;</span><br><span class="line">cin&gt;&gt;s;</span><br><span class="line"><span class="type">int</span> n=s.<span class="built_in">size</span>();</span><br><span class="line">s=<span class="string">&#x27;?&#x27;</span>+s;</span><br><span class="line"><span class="built_in">rep</span>(i,<span class="number">1</span>,<span class="number">12</span>)</span><br><span class="line">&#123;</span><br><span class="line">dp[<span class="number">2</span>][i]=-inf;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> pos1=<span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> pos2=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(s[<span class="number">1</span>]==<span class="string">&#x27;R&#x27;</span>)pos1=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(s[<span class="number">1</span>]==<span class="string">&#x27;G&#x27;</span>)pos1=<span class="number">2</span>;</span><br><span class="line"><span class="keyword">if</span>(s[<span class="number">1</span>]==<span class="string">&#x27;B&#x27;</span>)pos1=<span class="number">3</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(s[<span class="number">2</span>]==<span class="string">&#x27;R&#x27;</span>)pos2=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(s[<span class="number">2</span>]==<span class="string">&#x27;G&#x27;</span>)pos2=<span class="number">2</span>;</span><br><span class="line"><span class="keyword">if</span>(s[<span class="number">2</span>]==<span class="string">&#x27;B&#x27;</span>)pos2=<span class="number">3</span>;</span><br><span class="line"></span><br><span class="line">dp[<span class="number">2</span>][pos1*<span class="number">3</span>+pos2]=<span class="number">0</span>;</span><br><span class="line">dp[<span class="number">2</span>][pos1]=<span class="number">0</span>;</span><br><span class="line">dp[<span class="number">2</span>][pos2]=<span class="number">0</span>;</span><br><span class="line">    <span class="comment">//初始化</span></span><br><span class="line"><span class="built_in">rep</span>(i,<span class="number">3</span>,n)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">rep</span>(j,<span class="number">1</span>,<span class="number">12</span>)<span class="comment">//当前不取，从上一状态直接继承</span></span><br><span class="line">&#123;</span><br><span class="line">dp[i][j]=dp[i<span class="number">-1</span>][j];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(s[i]==<span class="string">&#x27;R&#x27;</span>)</span><br><span class="line">&#123;</span><br><span class="line">dp[i][<span class="number">1</span>]=<span class="built_in">max</span>(dp[i<span class="number">-1</span>][<span class="number">4</span>]+<span class="number">1</span>,dp[i][<span class="number">1</span>]);</span><br><span class="line">dp[i][<span class="number">2</span>]=<span class="built_in">max</span>(dp[i<span class="number">-1</span>][<span class="number">4</span>]+<span class="number">1</span>,dp[i][<span class="number">1</span>]);</span><br><span class="line">dp[i][<span class="number">3</span>]=<span class="built_in">max</span>(dp[i<span class="number">-1</span>][<span class="number">4</span>]+<span class="number">1</span>,dp[i][<span class="number">1</span>]);</span><br><span class="line"><span class="comment">//三个相同，全消去，答案更新</span></span><br><span class="line">dp[i][<span class="number">4</span>]=<span class="built_in">max</span>(&#123;dp[i<span class="number">-1</span>][<span class="number">1</span>],dp[i<span class="number">-1</span>][<span class="number">7</span>],dp[i<span class="number">-1</span>][<span class="number">10</span>],dp[i<span class="number">-1</span>][<span class="number">4</span>]&#125;);</span><br><span class="line">dp[i][<span class="number">7</span>]=<span class="built_in">max</span>(&#123;dp[i<span class="number">-1</span>][<span class="number">11</span>],dp[i<span class="number">-1</span>][<span class="number">8</span>],dp[i<span class="number">-1</span>][<span class="number">5</span>],dp[i<span class="number">-1</span>][<span class="number">2</span>]&#125;);</span><br><span class="line">dp[i][<span class="number">10</span>]=<span class="built_in">max</span>(&#123;dp[i<span class="number">-1</span>][<span class="number">12</span>],dp[i<span class="number">-1</span>][<span class="number">9</span>],dp[i<span class="number">-1</span>][<span class="number">6</span>],dp[i<span class="number">-1</span>][<span class="number">3</span>]&#125;);</span><br><span class="line"><span class="comment">//末尾为1的所有情况</span></span><br><span class="line"><span class="type">int</span> tmp=<span class="built_in">max</span>(dp[i<span class="number">-1</span>][<span class="number">9</span>],dp[i<span class="number">-1</span>][<span class="number">11</span>]);<span class="comment">//三个不同，4-12都可以从这里继承</span></span><br><span class="line"><span class="built_in">rep</span>(j,<span class="number">4</span>,<span class="number">12</span>)</span><br><span class="line">&#123;</span><br><span class="line">dp[i][j]=<span class="built_in">max</span>(dp[i][j],tmp);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(s[i]==<span class="string">&#x27;G&#x27;</span>)</span><br><span class="line">&#123;</span><br><span class="line">dp[i][<span class="number">1</span>]=<span class="built_in">max</span>(dp[i<span class="number">-1</span>][<span class="number">8</span>]+<span class="number">1</span> ,dp[i][<span class="number">1</span>]);</span><br><span class="line">dp[i][<span class="number">2</span>]=<span class="built_in">max</span>(dp[i<span class="number">-1</span>][<span class="number">8</span>]+<span class="number">1</span> ,dp[i][<span class="number">2</span>]);</span><br><span class="line">dp[i][<span class="number">3</span>]=<span class="built_in">max</span>(dp[i<span class="number">-1</span>][<span class="number">8</span>]+<span class="number">1</span> ,dp[i][<span class="number">3</span>]);</span><br><span class="line">dp[i][<span class="number">5</span>]=<span class="built_in">max</span>(&#123;dp[i<span class="number">-1</span>][<span class="number">1</span>],dp[i<span class="number">-1</span>][<span class="number">7</span>],dp[i<span class="number">-1</span>][<span class="number">10</span>],dp[i<span class="number">-1</span>][<span class="number">4</span>]&#125;);</span><br><span class="line">dp[i][<span class="number">8</span>]=<span class="built_in">max</span>(&#123;dp[i<span class="number">-1</span>][<span class="number">11</span>],dp[i<span class="number">-1</span>][<span class="number">8</span>],dp[i<span class="number">-1</span>][<span class="number">5</span>],dp[i<span class="number">-1</span>][<span class="number">2</span>]&#125;);</span><br><span class="line">dp[i][<span class="number">11</span>]=<span class="built_in">max</span>(&#123;dp[i<span class="number">-1</span>][<span class="number">12</span>],dp[i<span class="number">-1</span>][<span class="number">9</span>],dp[i<span class="number">-1</span>][<span class="number">6</span>],dp[i<span class="number">-1</span>][<span class="number">3</span>]&#125;);</span><br><span class="line"><span class="type">int</span> tmp=<span class="built_in">max</span>(dp[i<span class="number">-1</span>][<span class="number">6</span>],dp[i<span class="number">-1</span>][<span class="number">10</span>]);</span><br><span class="line"><span class="built_in">rep</span>(j,<span class="number">4</span>,<span class="number">12</span>)</span><br><span class="line">&#123;</span><br><span class="line">dp[i][j]=<span class="built_in">max</span>(dp[i][j],tmp);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(s[i]==<span class="string">&#x27;B&#x27;</span>)</span><br><span class="line">&#123;</span><br><span class="line">dp[i][<span class="number">1</span>]=<span class="built_in">max</span>(dp[i<span class="number">-1</span>][<span class="number">12</span>]+<span class="number">1</span> ,dp[i][<span class="number">1</span>]);</span><br><span class="line">dp[i][<span class="number">2</span>]=<span class="built_in">max</span>(dp[i<span class="number">-1</span>][<span class="number">12</span>]+<span class="number">1</span> ,dp[i][<span class="number">2</span>]);</span><br><span class="line">dp[i][<span class="number">3</span>]=<span class="built_in">max</span>(dp[i<span class="number">-1</span>][<span class="number">12</span>]+<span class="number">1</span> ,dp[i][<span class="number">3</span>]);</span><br><span class="line">dp[i][<span class="number">6</span>]=<span class="built_in">max</span>(&#123;dp[i<span class="number">-1</span>][<span class="number">1</span>],dp[i<span class="number">-1</span>][<span class="number">7</span>],dp[i<span class="number">-1</span>][<span class="number">10</span>],dp[i<span class="number">-1</span>][<span class="number">4</span>]&#125;);</span><br><span class="line">dp[i][<span class="number">9</span>]=<span class="built_in">max</span>(&#123;dp[i<span class="number">-1</span>][<span class="number">11</span>],dp[i<span class="number">-1</span>][<span class="number">8</span>],dp[i<span class="number">-1</span>][<span class="number">5</span>],dp[i<span class="number">-1</span>][<span class="number">2</span>]&#125;);</span><br><span class="line">dp[i][<span class="number">12</span>]=<span class="built_in">max</span>(&#123;dp[i<span class="number">-1</span>][<span class="number">12</span>],dp[i<span class="number">-1</span>][<span class="number">9</span>],dp[i<span class="number">-1</span>][<span class="number">6</span>],dp[i<span class="number">-1</span>][<span class="number">3</span>]&#125;);</span><br><span class="line"><span class="type">int</span> tmp=<span class="built_in">max</span>(dp[i<span class="number">-1</span>][<span class="number">5</span>],dp[i<span class="number">-1</span>][<span class="number">7</span>]);</span><br><span class="line"><span class="built_in">rep</span>(j,<span class="number">4</span>,<span class="number">12</span>)</span><br><span class="line">&#123;</span><br><span class="line">dp[i][j]=<span class="built_in">max</span>(dp[i][j],tmp);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> ans=<span class="number">0</span>;</span><br><span class="line"><span class="built_in">rep</span>(i,<span class="number">1</span>,<span class="number">12</span>)</span><br><span class="line">&#123;</span><br><span class="line">ans=<span class="built_in">max</span>(ans,dp[n][i]);</span><br><span class="line">&#125;</span><br><span class="line">cout&lt;&lt;ans&lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1007-Expectation-Easy-Version"><a href="#1007-Expectation-Easy-Version" class="headerlink" title="1007 Expectation (Easy Version)"></a><a href="http://acm.hdu.edu.cn/showproblem.php?pid=7330">1007 Expectation (Easy Version)</a></h2><p>题意：给定$n,m,a,b$，每轮有$a/b$的概率胜利，每次胜利可以获得当前胜场的k次的分数，求分数期望。</p><p>解法：由于分数和赢的位置无关，所以只要考虑赢了多少次即可。计算出赢$i$场的概率为$C(i,n)<em>a/b </em>C(n-i,n)*(b-a)/b$,每场的胜利的分数为$pre[i]=pre[i-1]+pow(i,k)$。注意预处理避免本题超时。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> n,m,a,b;</span><br><span class="line">cin&gt;&gt;n&gt;&gt;m&gt;&gt;a&gt;&gt;b;</span><br><span class="line"><span class="type">int</span> ans=<span class="number">0</span>;</span><br><span class="line">pre[<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line"><span class="built_in">rep</span>(i,<span class="number">1</span>,n)</span><br><span class="line">&#123;</span><br><span class="line">pre[i]=(pre[i<span class="number">-1</span>]+<span class="built_in">qpow</span>(i,m)%mod)%mod;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="type">int</span> inv_b=<span class="built_in">invv</span>(b);</span><br><span class="line"><span class="type">int</span> inv_b_a=<span class="built_in">invv</span>(b-a);</span><br><span class="line">s[<span class="number">0</span>]=<span class="built_in">qpow</span>(b-a,n)*<span class="built_in">qpow</span>(inv_b,n);</span><br><span class="line">s[<span class="number">0</span>]%=mod;</span><br><span class="line"><span class="built_in">rep</span>(i,<span class="number">1</span>,n)</span><br><span class="line">&#123;</span><br><span class="line">s[i]=s[i<span class="number">-1</span>]*a%mod;</span><br><span class="line">s[i]*=inv_b_a;</span><br><span class="line">s[i]%=mod;</span><br><span class="line">&#125;</span><br><span class="line">C[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line"><span class="built_in">rep</span>(i,<span class="number">1</span>,n)</span><br><span class="line">&#123;</span><br><span class="line">C[i]=(C[i<span class="number">-1</span>]%mod*(n-i+<span class="number">1</span>)%mod);</span><br><span class="line">C[i]*=<span class="built_in">qpow</span>(i,mod<span class="number">-2</span>);</span><br><span class="line">C[i]%=mod;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">rep</span>(i,<span class="number">1</span>,n)</span><br><span class="line">&#123;</span><br><span class="line">ans=(ans+C[i]*s[i]%mod*pre[i]%mod)%mod;</span><br><span class="line">&#125;</span><br><span class="line">cout&lt;&lt;ans&lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1012-Counting-Stars"><a href="#1012-Counting-Stars" class="headerlink" title="1012 Counting Stars"></a><a href="http://acm.hdu.edu.cn/showproblem.php?pid=7335">1012 Counting Stars</a></h2><p>题意：定义k+1个点构成的菊花图为kstar图，花瓣不同或花蕊不同即认为是不同的菊花，$cnt<em>k$表示kstar图的数量，求$(cnt_2 )xor (cnt_3)xor ……cnt</em>(n-1)$的值。</p><p>解法：记录每个点的度，计算对对应cnt的贡献即可。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">int</span> maxn = <span class="number">1e6</span> + <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> fac[N], inv[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">fac[<span class="number">0</span>] = inv[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">fac[<span class="number">1</span>] = inv[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt;= maxn - <span class="number">9</span>; ++i) <span class="comment">// 一定要从2开始</span></span><br><span class="line">fac[i] = fac[i - <span class="number">1</span>] * i % mod,</span><br><span class="line">inv[i] = (mod - mod / i) * inv[mod % i] % mod;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= maxn - <span class="number">9</span>; ++i)</span><br><span class="line">inv[i] = inv[i] * inv[i - <span class="number">1</span>] % mod;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">C</span><span class="params">(ll n, ll m)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (m &gt; n)</span><br><span class="line"><span class="keyword">return</span> <span class="number">0ll</span>;</span><br><span class="line"><span class="keyword">return</span> fac[n] * inv[m] % mod * inv[n - m] % mod;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line">cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt;<span class="built_in">ans</span>(n+<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">vector&lt;<span class="type">int</span>&gt;<span class="built_in">deg</span>(n+<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line"><span class="built_in">rep</span>(i, <span class="number">1</span>, m)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> u,v;</span><br><span class="line">cin&gt;&gt;u&gt;&gt;v;</span><br><span class="line">deg[u]++;</span><br><span class="line">deg[v]++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">rep</span>(i,<span class="number">1</span>,n)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">rep</span>(j,<span class="number">2</span>,deg[i])</span><br><span class="line">&#123;</span><br><span class="line">ans[j]+=<span class="built_in">C</span>(deg[i],j);</span><br><span class="line">ans[j]%=mod;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> anss=<span class="number">0</span>;</span><br><span class="line"><span class="built_in">rep</span>(i,<span class="number">2</span>,n<span class="number">-1</span>)</span><br><span class="line">&#123;</span><br><span class="line">anss^=ans[i];</span><br><span class="line">&#125;</span><br><span class="line">cout&lt;&lt;anss&lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="1009-Tree"><a href="#1009-Tree" class="headerlink" title="1009  Tree"></a><a href="http://acm.hdu.edu.cn/showproblem.php?pid=7332">1009  Tree</a></h2><p>题意：给一颗树，告诉你重孩子，对于每一条重链建立树状数组，求最终形成的图形的深度。</p><p>解法：树形dp，具体见注释。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> son[N];</span><br><span class="line"><span class="type">int</span> dp[N];</span><br><span class="line"><span class="type">int</span> node[N];</span><br><span class="line"><span class="type">int</span> head[N];</span><br><span class="line"><span class="type">int</span> nxt[N];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> w)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">node[u]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> v=head[u];v;v=nxt[v])</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(v==son[u])<span class="comment">//是重儿子</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">dfs</span>(v,w);<span class="comment">//继承重链的顶端</span></span><br><span class="line">node[u]=node[v]+<span class="number">2</span>;<span class="comment">//如果这里用+1，计算深度的时候需要求log(node[v]*2),请根据深度和点数的关系自行理解。</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">dfs</span>(v,v);<span class="comment">//更新重链的顶端为自己</span></span><br><span class="line">           <span class="comment">//每个点对应的高度为dp[v] + __lg(node[v])，当前点的高度为所有儿子高度重最长的高度+1</span></span><br><span class="line">dp[w] = <span class="built_in">max</span>(dp[w], dp[v] + __lg(node[v]) + <span class="number">1</span>);<span class="comment">//log计算重链长度对应的树状数组深度</span></span><br><span class="line">            </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line">cin&gt;&gt;n;</span><br><span class="line"><span class="built_in">rep</span>(i,<span class="number">1</span>,n)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> x;</span><br><span class="line">cin&gt;&gt;x;</span><br><span class="line">nxt[i]=head[x];</span><br><span class="line">head[x]=i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">rep</span>(i,<span class="number">1</span>,n)</span><br><span class="line">&#123;</span><br><span class="line">cin&gt;&gt;son[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">dfs</span>(<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line">cout&lt;&lt;dp[<span class="number">1</span>] + __lg(node[<span class="number">1</span>]) + <span class="number">1</span>&lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">rep</span>(i,<span class="number">0</span>,n)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">debug</span>(node[i]);</span><br><span class="line"><span class="built_in">debug</span>(dp[i]);</span><br><span class="line">son[i] = dp[i] = node[i] = head[i] = nxt[i] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 杭电多校 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>牛客多校5</title>
      <link href="/undefined/63971.html"/>
      <url>/undefined/63971.html</url>
      
        <content type="html"><![CDATA[<h2 id="C-Cheeeeen-the-Cute-Cat"><a href="#C-Cheeeeen-the-Cute-Cat" class="headerlink" title="C Cheeeeen the Cute Cat"></a><a href="https://ac.nowcoder.com/acm/contest/57359/C">C Cheeeeen the Cute Cat</a></h2><p>赛时数据太弱。</p><p>题意：给定一个二分图，图的左右两部均有n个点，对任意$i,j∈[1,n]$，若存在边$(i,j+n)$,则不存在$(j,i+n)$,使用邻接矩阵给出该图的$n*(n-1)/2$，表示$i$到$n+j$条边。问该二分图的最大匹配。</p><p>解法：将$i$到$n+j$的变转化为$i$到$j$的边，这样这个问题就从最大匹配转换为了将点分配到环中。</p><p>此时原图转化为 [竞赛图][<a href="https://cmwqf.github.io/2020/04/22/浅谈竞赛图/">浅谈竞赛图 | cmwqf’s blog</a>]。</p><p>竞赛图的性质，竞赛图里，任意大小为$n&gt;1$的强连通分量中，大小为$[3,n]$的环均存在。</p><p>所以如果能找到孤立的强连通分量，答案为$n-1$，否则答案为$n$。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt;<span class="built_in">deg</span>(n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j &lt; n; j ++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> e;</span><br><span class="line">            cin &gt;&gt; e;</span><br><span class="line">            deg[i] += e;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">sort</span>(deg.<span class="built_in">begin</span>(),deg.<span class="built_in">end</span>());</span><br><span class="line">    <span class="type">int</span> s = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>, j = <span class="number">0</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        s += deg[i<span class="number">-1</span>];</span><br><span class="line">        <span class="keyword">if</span>(s == i*(i<span class="number">-1</span>)/<span class="number">2</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(i - j &lt; <span class="number">3</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                cout &lt;&lt; n - <span class="number">1</span> &lt;&lt; endl;</span><br><span class="line">                <span class="keyword">return</span> ;</span><br><span class="line">            &#125;</span><br><span class="line">            j = i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; n &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="D-Cirno’s-Perfect-Equation-Class"><a href="#D-Cirno’s-Perfect-Equation-Class" class="headerlink" title="D Cirno’s Perfect Equation Class"></a><a href="https://ac.nowcoder.com/acm/contest/57359/D">D Cirno’s Perfect Equation Class</a></h2><p>题意：给定$k,c,n$,求满足 $k*a+b=c$ 且 $c$能被$b$整除 且 $gcd(a,b)&gt;=n$</p><p>解法：枚举$c$的因子，将每个因子进行合法性检验，然后统计答案即可。注意特判完全平方数避免重复计数。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cin &gt;&gt; k &gt;&gt; c &gt;&gt; n;</span><br><span class="line">    <span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i * i &lt;= c; i ++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(c % i == <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="type">int</span> b = i, bb = c / i;</span><br><span class="line">            <span class="type">int</span> a = (c - b) / k;</span><br><span class="line">            <span class="keyword">if</span>((a * k + b == c) &amp;&amp; (__gcd(a, b) &gt;= n) &amp;&amp; a != <span class="number">0</span>) ans ++;</span><br><span class="line">            a = (c - bb) / k;</span><br><span class="line">            <span class="keyword">if</span>((a * k + bb == c) &amp;&amp; (__gcd(a, bb) &gt;= n) &amp;&amp; bb != b &amp;&amp; a != <span class="number">0</span>) ans ++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="G-Go-to-Play-Maimai-DX"><a href="#G-Go-to-Play-Maimai-DX" class="headerlink" title="G Go to Play Maimai DX"></a><a href="https://ac.nowcoder.com/acm/contest/57359/G">G Go to Play Maimai DX</a></h2><p>题意：给定n个物品，找到满足条件的最短区间。要求必须包含1,2,3物品和k*4个物品。</p><p>解法：尺取法，右指针移动到合法区间后移动左指针至不满足条件，更新答案后继续移动右指针。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">check</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> f[<span class="number">1</span>] &amp;&amp; f[<span class="number">2</span>] &amp;&amp; f[<span class="number">3</span>] &amp;&amp; f[<span class="number">4</span>]&gt;=k;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cin&gt;&gt;n&gt;&gt;k;</span><br><span class="line"><span class="built_in">rep</span>(i,<span class="number">1</span>,n)</span><br><span class="line">&#123;</span><br><span class="line">cin&gt;&gt;a[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> l=<span class="number">1</span>;</span><br><span class="line"><span class="type">int</span> ans=n;</span><br><span class="line"><span class="built_in">rep</span>(i,<span class="number">1</span>,n)</span><br><span class="line">&#123;</span><br><span class="line">f[a[i]]++;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">check</span>())</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">rep</span>(j,l,i)</span><br><span class="line">&#123;</span><br><span class="line">f[a[j]]--;</span><br><span class="line"><span class="keyword">if</span>(!<span class="built_in">check</span>())</span><br><span class="line">&#123;</span><br><span class="line">l=j;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">ans=<span class="built_in">min</span>(i-l+<span class="number">1</span>,ans);</span><br><span class="line">l++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">cout&lt;&lt;ans&lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="H-Nazrin-the-Greeeeeedy-Mouse"><a href="#H-Nazrin-the-Greeeeeedy-Mouse" class="headerlink" title="H Nazrin the Greeeeeedy Mouse"></a><a href="https://ac.nowcoder.com/acm/contest/57359/H">H Nazrin the Greeeeeedy Mouse</a></h2><p>题意：一根数轴上有n个奶酪，每个奶酪的价值和体积给定。老鼠一共有m个包，每个包的体积给定且保证递增。</p><p>对于每块奶酪，老鼠可以选择钻洞通过或直接取走，钻过洞的奶酪不能再被取走。求能获得的最大的奶酪价值。</p><p>解法：预处理背包（见注释）,然后$g[i][j]$表示用了i个背包，拿到第j个奶酪的最大值，显然$g[i][j]=max(g[i-1][k]+f[k+1][j][size[i]],k=[0,j-1])$。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> f[N+<span class="number">5</span>][N+<span class="number">5</span>][N+<span class="number">5</span>];<span class="comment">//i j k体积为k的包在i到j能取得的最大值</span></span><br><span class="line"><span class="type">int</span> a[N+<span class="number">5</span>];</span><br><span class="line"><span class="type">int</span> b[N+<span class="number">5</span>];</span><br><span class="line"><span class="type">int</span> siz[<span class="number">100000</span>+<span class="number">5</span>];</span><br><span class="line"><span class="type">int</span> use[N+<span class="number">5</span>];</span><br><span class="line"><span class="type">int</span> g[N+<span class="number">5</span>][N+<span class="number">5</span>];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> n,m;</span><br><span class="line">cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line"><span class="built_in">rep</span>(i,<span class="number">1</span>,n)</span><br><span class="line">&#123;</span><br><span class="line">cin&gt;&gt;a[i]&gt;&gt;b[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">rep</span>(i,<span class="number">1</span>,n)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">rep</span>(j,i,n)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">rep</span>(w,<span class="number">0</span>,N)</span><br><span class="line">&#123;</span><br><span class="line">f[i][j][w]=f[i][j<span class="number">-1</span>][w];</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">rep</span>(w,a[j],N)</span><br><span class="line">&#123;</span><br><span class="line">f[i][j][w]=<span class="built_in">max</span>(f[i][j][w],f[i][j<span class="number">-1</span>][w-a[j]]+b[j]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">rep</span>(j,<span class="number">1</span>,n)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">rep</span>(w,<span class="number">1</span>,N)</span><br><span class="line">&#123;</span><br><span class="line">f[i][j][w]=<span class="built_in">max</span>(f[i][j][w],f[i][j][w<span class="number">-1</span>]);<span class="comment">//更新前缀最大</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">rep</span>(i,<span class="number">1</span>,m)</span><br><span class="line">&#123;</span><br><span class="line">cin&gt;&gt;siz[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> cnt=<span class="number">0</span>;</span><br><span class="line"><span class="built_in">rep</span>(i,<span class="built_in">max</span>(<span class="number">1ll</span>,m-n),m)<span class="comment">//因为包的体积递增，所以只要考虑后n个包</span></span><br><span class="line">&#123;</span><br><span class="line">use[++cnt]=siz[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> ans=<span class="number">0</span>;</span><br><span class="line"><span class="built_in">rep</span>(i,<span class="number">1</span>,cnt)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">rep</span>(j,<span class="number">1</span>,n)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">rep</span>(k,<span class="number">0</span>,j<span class="number">-1</span>)</span><br><span class="line">g[i][j]=<span class="built_in">max</span>(g[i][j],g[i<span class="number">-1</span>][k]+f[k+<span class="number">1</span>][j][use[i]]);</span><br><span class="line"></span><br><span class="line">ans=<span class="built_in">max</span>(ans,g[i][j]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">cout&lt;&lt;ans&lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="I-The-Yakumo-Family"><a href="#I-The-Yakumo-Family" class="headerlink" title="I The Yakumo Family"></a><a href="https://ac.nowcoder.com/acm/contest/57359/I">I The Yakumo Family</a></h2><p><img src="C:\Users\晓晓\AppData\Roaming\Typora\typora-user-images\image-20230803103846263.png" alt="image-20230803103846263"></p><p>解法：拆位，考虑每个数对对应二进制位的贡献，即计算区间内对该二进制位有贡献的数字是奇数还是偶数。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 牛客多校 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>牛客多校4</title>
      <link href="/undefined/14626.html"/>
      <url>/undefined/14626.html</url>
      
        <content type="html"><![CDATA[<p>这场题面很有意思，了解polpot之后再看题面会有不一样的感受。</p><h2 id="A-Bobo-String-Construction"><a href="#A-Bobo-String-Construction" class="headerlink" title="A Bobo String Construction"></a><a href="https://ac.nowcoder.com/acm/contest/57358/A">A Bobo String Construction</a></h2><p>题意：给定识别码t，求长度为n的内容码s，保证t在（t+s+t）的字符串中只出现一次。</p><p>解法：先得到结论，s为全0或全1必定有解，然后直接判断即可。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    string s1,s2;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        s1+=<span class="string">&#x27;1&#x27;</span>;</span><br><span class="line">        s2+=<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    string t,t1,t2;</span><br><span class="line">    cin&gt;&gt;t;</span><br><span class="line">    t1=t.<span class="built_in">substr</span>(<span class="number">1</span>)+s1+t.<span class="built_in">substr</span>(<span class="number">0</span>,t.<span class="built_in">size</span>()<span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">if</span>(t1.<span class="built_in">find</span>(t)!=<span class="number">-1</span>)cout&lt;&lt;s2&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">else</span> cout&lt;&lt;s1&lt;&lt;endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="F-Election-of-the-King"><a href="#F-Election-of-the-King" class="headerlink" title="F Election of the King"></a><a href="https://ac.nowcoder.com/acm/contest/57358/F">F Election of the King</a></h2><p>题意：有n个人，每个人有一个立场，从小到大分别代表极左到极右。每次投票将选择一个人退出， 每个人的选择策略是选择和自己立场相差最大的，若存在多个人立场相差最大的，优先选择靠右的，问最终剩下那些人。</p><p>解法：将每个人按照立场和位置排序，左指针初始值为1，右指针初始值为n，二分查找第一个投给左边的人的位置，然后求出投给左端点和右端点的人数个数，将票数较多的人和相同持方的人淘汰。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> qx;</span><br><span class="line">    <span class="type">int</span> id;</span><br><span class="line">&#125;a[N];</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">cmp</span><span class="params">(node x,node  y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x.qx==y.qx) <span class="keyword">return</span> x.id&lt;y.id;</span><br><span class="line">    <span class="keyword">return</span> x.qx&lt;y.qx;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">check</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> now)</span><span class="comment">//这个人投给左边返回true，否则返回false</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> a=<span class="built_in">abs</span>(l-now);</span><br><span class="line">    <span class="type">int</span> b=<span class="built_in">abs</span>(r-now);</span><br><span class="line">    <span class="keyword">if</span>(a&gt;b) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    <span class="built_in">rep</span>(i,<span class="number">1</span>,n)</span><br><span class="line">    &#123;</span><br><span class="line">        cin&gt;&gt;a[i].qx;</span><br><span class="line">        a[i].id=i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">sort</span>(a+<span class="number">1</span>,a+<span class="number">1</span>+n,cmp);</span><br><span class="line">    a[<span class="number">0</span>]=a[<span class="number">1</span>];</span><br><span class="line">    a[n+<span class="number">1</span>]=a[n];</span><br><span class="line">    <span class="type">int</span> l=<span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> r=n;</span><br><span class="line">    <span class="keyword">while</span>(a[l].qx!=a[r].qx)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> high=r;</span><br><span class="line">        <span class="type">int</span> low=l;</span><br><span class="line">        <span class="type">int</span> pos=<span class="number">-1</span>;<span class="comment">//第一个投给左边的人</span></span><br><span class="line">        <span class="keyword">while</span>(low&lt;=high)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> mid=low+(high-low)/<span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">check</span>(a[l].qx,a[r].qx,a[mid].qx))</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(mid==l||!<span class="built_in">check</span>(a[l].qx,a[r].qx,a[mid<span class="number">-1</span>].qx))</span><br><span class="line">                &#123;pos=mid;<span class="keyword">break</span>;&#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    high=mid<span class="number">-1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                low=mid+<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> nowl=l;</span><br><span class="line">        <span class="type">int</span> nowr=r;</span><br><span class="line">        <span class="keyword">if</span>(pos==<span class="number">-1</span>) <span class="comment">//没有人投给左边</span></span><br><span class="line">        &#123;<span class="keyword">while</span>(a[r].qx==a[nowr].qx)r--;<span class="keyword">continue</span>;&#125;</span><br><span class="line">        <span class="type">int</span> antir=pos-l;<span class="comment">//反对右边的人数</span></span><br><span class="line">        <span class="type">int</span> antil=r-pos+<span class="number">1</span>;<span class="comment">//反对左边的人数</span></span><br><span class="line">        <span class="keyword">if</span>(antil&gt;antir)</span><br><span class="line">        &#123;<span class="keyword">while</span>(a[l].qx==a[nowl].qx)l++;&#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;<span class="keyword">while</span>(a[r].qx==a[nowr].qx)r--;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;a[l].id&lt;&lt;<span class="string">&quot;\n&quot;</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="L-We-are-the-Lights"><a href="#L-We-are-the-Lights" class="headerlink" title="L We are the Lights"></a><a href="https://ac.nowcoder.com/acm/contest/57358/L">L We are the Lights</a></h2><p>题意：每次选择一行或者一列全部打开或全部关闭，求最终亮着的等的数量。</p><p>解法：可以发现后面的操作会覆盖前面的，所以只要从后向前，记录操作过的行和列，每次操作更新答案即可，重复操作直接忽略。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> n, m, q;</span><br><span class="line">cin &gt;&gt; n &gt;&gt; m &gt;&gt; q;</span><br><span class="line"><span class="built_in">rep</span>(i, <span class="number">1</span>, q)</span><br><span class="line">&#123;</span><br><span class="line">cin &gt;&gt; cz[i] &gt;&gt; ii[i] &gt;&gt; op[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line">set&lt;<span class="type">int</span>&gt; coloff, colon, rowoff, rowon;</span><br><span class="line">    unordered_map&lt;<span class="type">int</span>, <span class="type">int</span>&gt; vis1, vis2;</span><br><span class="line"><span class="keyword">while</span> (q)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (cz[q][<span class="number">0</span>] == <span class="string">&#x27;r&#x27;</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (op[q][<span class="number">1</span>] == <span class="string">&#x27;n&#x27;</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(!rowoff.<span class="built_in">count</span>(ii[q]) &amp;&amp; !vis1[ii[q]])&#123;</span><br><span class="line">rowon.<span class="built_in">insert</span>(ii[q]);</span><br><span class="line">                    ans += m - coloff.<span class="built_in">size</span>() - colon.<span class="built_in">size</span>();</span><br><span class="line">&#125;</span><br><span class="line">                </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(!rowon.<span class="built_in">count</span>(ii[q]) &amp;&amp; !vis1[ii[q]])&#123;</span><br><span class="line">                    rowoff.<span class="built_in">insert</span>(ii[q]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">            vis1[ii[q]] = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (op[q][<span class="number">1</span>] == <span class="string">&#x27;n&#x27;</span>)<span class="comment">//on</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(!coloff.<span class="built_in">count</span>(ii[q]) &amp;&amp; !vis2[ii[q]])&#123;</span><br><span class="line">colon.<span class="built_in">insert</span>(ii[q]);</span><br><span class="line">                    ans += n - rowoff.<span class="built_in">size</span>() - rowon.<span class="built_in">size</span>();</span><br><span class="line">&#125;</span><br><span class="line">                </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(!colon.<span class="built_in">count</span>(ii[q]) &amp;&amp; !vis2[ii[q]])&#123;</span><br><span class="line">                    coloff.<span class="built_in">insert</span>(ii[q]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">            vis2[ii[q]] = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">        q --;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; ans &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="J-Qu’est-ce-Que-C’est"><a href="#J-Qu’est-ce-Que-C’est" class="headerlink" title="J Qu’est-ce Que C’est?"></a><a href="https://ac.nowcoder.com/acm/contest/57358/J">J Qu’est-ce Que C’est?</a></h2><p>题意：求所有（长度大于等于2的区间和非负）的数组数量，每个数的范围是$[-m,m]$,长度为n。</p><p>思路：除了最后一个位置，其余位置的负数一定与正数绑定，将负数后的正数与该负数绑定，考虑填充$f[i][j]$,表示前i个数,最后一个块的和为j的方案数。</p><p>考虑如下转移：</p><p>​    当前位置非负：$f[i][j]=sum(f[i-1][k]),(0&lt;=k&lt;=m)$</p><p>​    当前位置为（负正）：$f[i][j]=sum(f[i-2][k]*(min(k,j-m))),(0&lt;=k&lt;=m)$</p><p>以下为暴力代码</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">5000</span>, P = <span class="number">998244353</span>;</span><br><span class="line"><span class="type">int</span> f[N + <span class="number">5</span>][N + <span class="number">5</span>], g[N + <span class="number">5</span>][N + <span class="number">5</span>];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line">f[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= m; i++)</span><br><span class="line">f[<span class="number">1</span>][i] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= m; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt;= m; j++)</span><br><span class="line">f[<span class="number">2</span>][i] = (f[<span class="number">2</span>][i] + f[<span class="number">1</span>][j]) % P;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> k = -m; k &lt;= <span class="number">-1</span>; k++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> res = i - k;</span><br><span class="line"><span class="keyword">if</span> (res &lt;= m &amp;&amp; res &gt;= <span class="number">0</span>)</span><br><span class="line">f[<span class="number">2</span>][i] = (f[<span class="number">2</span>][i] + <span class="number">1</span>) % P;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">3</span>; i &lt;= n; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt;= m; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">0</span>; k &lt;= m; k++)</span><br><span class="line">f[i][j] = (f[i][j] + f[i - <span class="number">1</span>][k]) % P;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">0</span>; k &lt;= m; k++)</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> l = -k; l &lt;= <span class="number">-1</span>; l++) <span class="comment">// 枚举负数</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> res = j - l;</span><br><span class="line"><span class="keyword">if</span> (res &lt;= m)</span><br><span class="line">f[i][j] = (f[i][j] + f[i - <span class="number">2</span>][k]) % P;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line"><span class="comment">// 最后一个数字可以填负数，需要单独考虑</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= m; i++)</span><br><span class="line">ans = (ans + f[n][i] + (<span class="type">long</span> <span class="type">long</span>)f[n - <span class="number">1</span>][i] * i) % P;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, ans);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>优化$f[i][j]$的前缀和和$j*f[i][j]$的后，即可在$O(n^2)$的复杂度内通过</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">5000</span>, P = <span class="number">998244353</span>;</span><br><span class="line"><span class="type">int</span> f[N + <span class="number">5</span>][N + <span class="number">5</span>], g[N + <span class="number">5</span>][N + <span class="number">5</span>];</span><br><span class="line"><span class="comment">// f表示直接的前缀和，g表示i*f的前缀和</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line"><span class="keyword">if</span> (n == <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, <span class="number">2</span> * m + <span class="number">1</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">f[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= m; i++)</span><br><span class="line">&#123;</span><br><span class="line">f[<span class="number">1</span>][i] = i + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (i)</span><br><span class="line">g[<span class="number">1</span>][i] = (g[<span class="number">1</span>][i - <span class="number">1</span>] + i) % P;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= m; i++)</span><br><span class="line">&#123;f[<span class="number">2</span>][i] = <span class="number">2</span> * m - i + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (i)</span><br><span class="line">&#123;</span><br><span class="line">g[<span class="number">2</span>][i] = (g[<span class="number">2</span>][i - <span class="number">1</span>] + (<span class="type">long</span> <span class="type">long</span>)f[<span class="number">2</span>][i] * i) % P;</span><br><span class="line">f[<span class="number">2</span>][i] = (f[<span class="number">2</span>][i - <span class="number">1</span>] + f[<span class="number">2</span>][i]) % P;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">3</span>; i &lt;= n; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt;= m; j++)</span><br><span class="line">f[i][j] = (f[i - <span class="number">1</span>][m] + g[i - <span class="number">2</span>][m - j] + (<span class="type">long</span> <span class="type">long</span>)(m - j) * (f[i - <span class="number">2</span>][m]</span><br><span class="line">- f[i - <span class="number">2</span>][m - j] + P) % P) % P;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= m; j++)</span><br><span class="line">&#123;</span><br><span class="line">g[i][j] = (g[i][j - <span class="number">1</span>] + (<span class="type">long</span> <span class="type">long</span>)f[i][j] * j) % P;</span><br><span class="line">f[i][j] = (f[i][j - <span class="number">1</span>] + f[i][j]) % P;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 最后一位特判</span></span><br><span class="line"><span class="type">long</span> <span class="type">long</span> ans = (f[n][m] + g[n - <span class="number">1</span>][m]) % P;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%lld&quot;</span>, ans);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 牛客多校 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>杭电多校4</title>
      <link href="/undefined/33082.html"/>
      <url>/undefined/33082.html</url>
      
        <content type="html"><![CDATA[<h2 id="1006-PSO"><a href="#1006-PSO" class="headerlink" title="1006 PSO"></a><a href="http://acm.hdu.edu.cn/showproblem.php?pid=7317">1006 PSO</a></h2><p>题意：给定一个菊花图，求任意选择两个点之间距离的期望。</p><p>做法：考虑距离为1的点对数量，再算出距离为2的点对数量，求加权平均数即可。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>, &amp;n);</span><br><span class="line">    <span class="keyword">if</span>(n == <span class="number">2</span>)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%.9lf %.9lf\n&quot;</span>, (db)<span class="number">1</span>, (db)<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    db ans = <span class="number">0.0</span>;</span><br><span class="line">    ans += <span class="number">1.0</span> * (n - <span class="number">1</span>) * (n - <span class="number">2</span>) + n - <span class="number">1</span>;</span><br><span class="line">    db e = ans / (n - <span class="number">1</span> + (n - <span class="number">1</span>) * (n - <span class="number">2</span>) / <span class="number">2</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%.9lf %.9lf\n&quot;</span>, e, (db)<span class="number">2</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1010-Kong-Ming-Qi"><a href="#1010-Kong-Ming-Qi" class="headerlink" title="1010 Kong Ming Qi"></a><a href="http://acm.hdu.edu.cn/showproblem.php?pid=7321">1010 Kong Ming Qi</a></h2><p>题意：给定一个$(n+2)<em>(n+2)$的棋盘，中间$n</em>n$部分有棋子，棋子的移动规则参考孔明棋。（每次可以选择一个棋子，然后选择四个方向之一：上、下、左或右。将棋子从其原始位置沿所选方向移动一个网格。除上述要求外，还必须满足以下条件：在原始位置和目标位置之间的中间位置上必须有棋子，目标位置不得有棋子。所有位置必须在棋盘上。移动后，中间位置上的棋子被拿走。）</p><p>求最终剩下的棋子数量最少为多少。</p><p>做法：特判1和3的情况，除了这两种情况外可以保证拿到只剩1个子。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="keyword">if</span>(n &gt; m) <span class="built_in">swap</span>(n, m);</span><br><span class="line">    <span class="keyword">if</span>(n == <span class="number">1</span>)&#123;</span><br><span class="line">        cout &lt;&lt; (m + <span class="number">1</span>) / <span class="number">2</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(m % <span class="number">3</span> == <span class="number">0</span> || n % <span class="number">3</span> == <span class="number">0</span>)&#123;</span><br><span class="line">        cout &lt;&lt; <span class="number">2</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; <span class="number">1</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1010-Kong-Ming-Qi-1"><a href="#1010-Kong-Ming-Qi-1" class="headerlink" title="1010 Kong Ming Qi"></a><a href="http://acm.hdu.edu.cn/showproblem.php?pid=7321">1010 Kong Ming Qi</a></h2><p>题意：给定一个$(n+2)<em>(n+2)$的棋盘，中间$n</em>n$部分有棋子，棋子的移动规则参考孔明棋。（每次可以选择一个棋子，然后选择四个方向之一：上、下、左或右。将棋子从其原始位置沿所选方向移动一个网格。除上述要求外，还必须满足以下条件：在原始位置和目标位置之间的中间位置上必须有棋子，目标位置不得有棋子。所有位置必须在棋盘上。移动后，中间位置上的棋子被拿走。）</p><p>求最终剩下的棋子数量最少为多少。</p><p>做法：特判1和3的情况，除了这两种情况外可以保证拿到只剩1个子。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="keyword">if</span>(n &gt; m) <span class="built_in">swap</span>(n, m);</span><br><span class="line">    <span class="keyword">if</span>(n == <span class="number">1</span>)&#123;</span><br><span class="line">        cout &lt;&lt; (m + <span class="number">1</span>) / <span class="number">2</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(m % <span class="number">3</span> == <span class="number">0</span> || n % <span class="number">3</span> == <span class="number">0</span>)&#123;</span><br><span class="line">        cout &lt;&lt; <span class="number">2</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; <span class="number">1</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1012-a-b-Problem"><a href="#1012-a-b-Problem" class="headerlink" title="1012  a-b Problem"></a><a href="http://acm.hdu.edu.cn/showproblem.php?pid=7323">1012  a-b Problem</a></h2><p>题意：给定n个物品，每个物品对alice和bob有不同的价值，两个人都希望二人的价值的差尽可能大，求最优策略下二人获得的价值之差。</p><p>解法：要获得最大价值差，就每次选择对二者价值之和最大的物品，可以同时保证自己尽可能大和对方尽可能小。按照该方法排序后模拟即可。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> a;</span><br><span class="line"><span class="type">int</span> b;</span><br><span class="line"><span class="type">int</span> c;</span><br><span class="line">&#125;a[N];</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">cmp</span><span class="params">(node x,node y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> x.c&lt;y.c;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line">cin&gt;&gt;n;</span><br><span class="line"><span class="built_in">rep</span>(i,<span class="number">1</span>,n)</span><br><span class="line">&#123;</span><br><span class="line">cin&gt;&gt;a[i].a&gt;&gt;a[i].b;</span><br><span class="line">a[i].c=a[i].a+a[i].b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">sort</span>(a+<span class="number">1</span>,a+<span class="number">1</span>+n,cmp);</span><br><span class="line"><span class="type">int</span> aa=<span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> bb=<span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> r=n;</span><br><span class="line"><span class="built_in">rep</span>(i,<span class="number">1</span>,n)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(i%<span class="number">2</span>)</span><br><span class="line">&#123;</span><br><span class="line">aa+=a[r].a;</span><br><span class="line">r--;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">bb+=a[r].b;</span><br><span class="line">r--;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">cout&lt;&lt;aa-bb&lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1003-Simple-Set-Problem"><a href="#1003-Simple-Set-Problem" class="headerlink" title="1003 Simple Set Problem"></a><a href="http://acm.hdu.edu.cn/contest/problem?cid=1097&amp;pid=1003">1003 Simple Set Problem</a></h2><p>题意：给定 k个非空的集合，每个集合仅包含绝对值不超过 $10^9$ 的整数。从每个集合中选择一个数字，组成长度为k的集合，求该集合中，最大值减最小值的差。</p><p>解法：将每个数字和对应所在集合存入数组中，按照大小进行排序，然后利用尺取法，移动右指针至满足每个集合都被取到的条件后移动左指针至最后一个满足条件的位置，更新答案，重复以上步骤至获得答案，排序复杂度为$n<em>log(n)$ ，尺取复杂度为$2</em>n$，本题卡常，不能用set求解。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    n = <span class="number">0</span>;</span><br><span class="line">    vector&lt;pii&gt; v;</span><br><span class="line">    cin &gt;&gt; k;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; k; i ++) cnt[i] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; k; i ++) &#123;</span><br><span class="line">        cin &gt;&gt; c;</span><br><span class="line">        n += c;</span><br><span class="line">        <span class="keyword">while</span> (c --) &#123;</span><br><span class="line">            <span class="type">int</span> x; cin &gt;&gt; x;</span><br><span class="line">            v.<span class="built_in">push_back</span>(&#123;x, i&#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">sort</span>(v.<span class="built_in">begin</span>(), v.<span class="built_in">end</span>());</span><br><span class="line">    deque&lt;<span class="type">int</span>&gt; dq;</span><br><span class="line">    <span class="type">int</span> count = <span class="number">0</span>, idx = <span class="number">0</span>, res = <span class="number">2e9</span>;</span><br><span class="line">    <span class="keyword">while</span> (idx &lt; n) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!cnt[v[idx].bb]) count ++;</span><br><span class="line">        dq.<span class="built_in">push_front</span>(idx);</span><br><span class="line">        cnt[v[idx].bb] ++;</span><br><span class="line">        idx ++;</span><br><span class="line">        <span class="keyword">if</span> (count &lt; k) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">while</span> (cnt[v[dq.<span class="built_in">back</span>()].bb] &gt; <span class="number">1</span>) &#123;</span><br><span class="line">            cnt[v[dq.<span class="built_in">back</span>()].bb] --;</span><br><span class="line">            dq.<span class="built_in">pop_back</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        res = <span class="built_in">min</span>(res, v[dq.<span class="built_in">front</span>()].aa - v[dq.<span class="built_in">back</span>()].aa);</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; res &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 杭电多校 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>新生答疑（纯主观个人向）</title>
      <link href="/undefined/30534.html"/>
      <url>/undefined/30534.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-要不要办卡（学生卡）"><a href="#1-要不要办卡（学生卡）" class="headerlink" title="1.要不要办卡（学生卡）"></a>1.要不要办卡（学生卡）</h2><p>​        学生卡不是必须品！<br>​        学生卡基本等于流量卡，包含100多G的流量，同时包含你在学校的宽带套餐。如果你流量够用完全可以不办。</p><h2 id="2-要不要带证件照"><a href="#2-要不要带证件照" class="headerlink" title="2.要不要带证件照"></a>2.要不要带证件照</h2><p>​        建议带若干一寸两寸，实际上除了学生证需要外暂时还没用到过。必须准备电子版本的证件照，各种颜色的底都准备几份，用到电子证件照的频率远高于实体证件照，而且寝室楼内的打印机可以直接打印。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>牛客多校3</title>
      <link href="/undefined/64355.html"/>
      <url>/undefined/64355.html</url>
      
        <content type="html"><![CDATA[<h2 id="H-Until-the-Blue-Moon-Rises"><a href="#H-Until-the-Blue-Moon-Rises" class="headerlink" title="H.Until the Blue Moon Rises"></a><a href="https://ac.nowcoder.com/acm/contest/57357/H">H.Until the Blue Moon Rises</a></h2><p>题意：给定n个数，每次可以选择两个数ai和aj，让 $ A_i=A_i+1,A_j=A_j−1 $,问能否在若干次操作后，让所有数都变成质数。</p><p>思路：转变题意为将sum拆分为n个质数，先考虑拆分出n-2个2，省下的数字如果是大于4的偶数，那么根据哥德巴赫猜想，必定可以分割为两个质数，否则将前面的一个2变成3，转变为偶数。</p><p>特判能否能拆分以及n为1时候的情况。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">isprim</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(x == <span class="number">1</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">2</span>; i * i &lt;= x; i ++)&#123;</span><br><span class="line"><span class="keyword">if</span>(x % i == <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line">cin&gt;&gt;n;</span><br><span class="line"><span class="type">int</span> sum=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(n==<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> x;</span><br><span class="line">cin&gt;&gt;x;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">isprim</span>(x))</span><br><span class="line">&#123;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;Yes\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;No\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">rep</span>(i,<span class="number">1</span>,n)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> x;</span><br><span class="line">cin&gt;&gt;x;</span><br><span class="line">sum+=x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(sum&lt;<span class="number">2</span>*n)</span><br><span class="line">&#123;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;No\n&quot;</span>;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(sum%<span class="number">2</span>==<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;Yes\n&quot;</span>;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="keyword">if</span>(n==<span class="number">2</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        sum-=<span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">isprim</span>(sum))</span><br><span class="line">        &#123;</span><br><span class="line">            cout&lt;&lt;<span class="string">&quot;Yes\n&quot;</span>;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            cout&lt;&lt;<span class="string">&quot;No\n&quot;</span>;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> </span><br><span class="line">    &#123;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;Yes\n&quot;</span>;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="D-Ama-no-Jaku"><a href="#D-Ama-no-Jaku" class="headerlink" title="D Ama no Jaku"></a><a href="https://ac.nowcoder.com/acm/contest/57357/D">D Ama no Jaku</a></h2><p>题意：给定一个n*n的01矩阵，每次可以选择一行或一列进行翻转，求最少翻转几次可以让行的最小值（）大于等于列的最大值。</p><p>思路：考虑满足条件的矩阵的形状，只可能为全0或全1，所以开始考虑将矩阵变为全0或全1的最小步数。</p><p>先将第一行变为全0或者全1，并记录需要改变的列，遍历剩下的每行，查看在修改对应列后是否满足全0或全1的条件，如果和第一行状态不同还需要多计数。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line">cin&gt;&gt;n;</span><br><span class="line"><span class="built_in">mem</span>(vis,<span class="number">0</span>);</span><br><span class="line"><span class="built_in">rep</span>(i,<span class="number">1</span>,n)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">rep</span>(j,<span class="number">1</span>,n)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">char</span> x;</span><br><span class="line">cin&gt;&gt;x;</span><br><span class="line">ch[i][j]=x-<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> i=<span class="number">1</span>;</span><br><span class="line"><span class="type">int</span> ans0=<span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> ans1=<span class="number">0</span>;</span><br><span class="line"><span class="built_in">rep</span>(j,<span class="number">1</span>,n)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(ch[i][j]==<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">vis[j]=<span class="number">1</span>;</span><br><span class="line">ans1++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">ans0=n-ans1;</span><br><span class="line"><span class="keyword">if</span>(ans1==n)</span><br><span class="line">&#123;</span><br><span class="line">ans1=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">if</span>(ans0==n)</span><br><span class="line">&#123;</span><br><span class="line">ans0=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> ans3=<span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> ans4=<span class="number">0</span>;</span><br><span class="line"><span class="built_in">rep</span>(i,<span class="number">2</span>,n)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> sum=<span class="number">0</span>;</span><br><span class="line"><span class="built_in">rep</span>(j,<span class="number">1</span>,n)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(vis[j])sum+=ch[i][j];</span><br><span class="line"><span class="keyword">else</span> sum+=<span class="number">1</span>-ch[i][j];</span><br><span class="line"><span class="comment">//debug(sum);</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(sum!=<span class="number">0</span>&amp;&amp;sum!=n)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//debug(i);</span></span><br><span class="line">cout&lt;&lt;<span class="string">&quot;-1\n&quot;</span>;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(sum==n)</span><br><span class="line">&#123;</span><br><span class="line">ans3++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">ans4=(n<span class="number">-1</span>)-ans3;</span><br><span class="line"><span class="type">int</span> ans5=<span class="built_in">min</span>(ans0+ans3,ans1+<span class="number">1</span>+ans4);</span><br><span class="line"><span class="type">int</span> ans6=<span class="built_in">min</span>(ans1+ans3,ans0+<span class="number">1</span>+ans4);</span><br><span class="line">cout&lt;&lt;<span class="built_in">min</span>(ans5,ans6)&lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="A-World-Fragments-I"><a href="#A-World-Fragments-I" class="headerlink" title="A World Fragments I"></a><a href="https://ac.nowcoder.com/acm/contest/57357/A">A World Fragments I</a></h2><p>题意：给定两个二进制数，对第一个数进行操作，每次操作可以提取二进制数中的一位数字，加或减去这个数字，求让第一个数变成第二个数的最小操作次数。</p><p>思路：特判一下初始数为0，否则直接输出两数之差，纯纯的签到。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cin &gt;&gt; a &gt;&gt; b;</span><br><span class="line">    <span class="type">int</span> n = a.<span class="built_in">size</span>(), m = b.<span class="built_in">size</span>();</span><br><span class="line">    <span class="type">int</span> aa = <span class="number">0</span>, bb = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i ++)&#123;</span><br><span class="line">        aa *= <span class="number">2</span>;</span><br><span class="line">        aa += a[i] -<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; m; i ++)&#123;</span><br><span class="line">        bb *= <span class="number">2</span>;</span><br><span class="line">        bb += b[i] -<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(aa == <span class="number">0</span> &amp;&amp; bb != <span class="number">0</span>)&#123;</span><br><span class="line">        cout &lt;&lt; <span class="number">-1</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; <span class="built_in">abs</span>(aa - bb) &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="J-Fine-Logic"><a href="#J-Fine-Logic" class="headerlink" title=" J.Fine Logic"></a><a href="https://ac.nowcoder.com/acm/contest/57357/J"> J.Fine Logic</a></h2><p>题意：a赢b的定义为，在任意榜单上位次更高。现给出n组赢关系，求最小的榜单数，满足所有的赢关系。</p><p>思路：根据赢关系建立有向图，检查是否为DAG，如果为DAG则按照拓扑序输出。</p><p>如果有环，则只需给出两个榜单，其中一个为1到n，另一个为n到1，即可满足所有赢关系。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">topo</span><span class="params">(<span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> cnt=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(!qu.<span class="built_in">empty</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        ++cnt;</span><br><span class="line">        <span class="type">int</span> u=qu.<span class="built_in">front</span>();qu.<span class="built_in">pop</span>();</span><br><span class="line">        ans.<span class="built_in">push_back</span>(u);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> &amp;v:nex[u])</span><br><span class="line">        &#123;</span><br><span class="line">            --du[v];</span><br><span class="line">            <span class="keyword">if</span>(!du[v]) qu.<span class="built_in">push</span>(v);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> cnt==n;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n,m;cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;m;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> a,b;cin&gt;&gt;a&gt;&gt;b;</span><br><span class="line">        nex[a].<span class="built_in">push_back</span>(b);</span><br><span class="line">        ++du[b];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i) </span><br><span class="line">    <span class="keyword">if</span>(!du[i]) qu.<span class="built_in">push</span>(i);</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">topo</span>(n))</span><br><span class="line">    &#123;</span><br><span class="line">        cout&lt;&lt;<span class="number">1</span>&lt;&lt;<span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> &amp;p:ans) cout&lt;&lt;p&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        cout&lt;&lt;<span class="number">2</span>&lt;&lt;<span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i) cout&lt;&lt;i&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">        cout&lt;&lt;<span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=n;i&gt;=<span class="number">1</span>;--i) cout&lt;&lt;i&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 牛客多校 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>杭电多校3</title>
      <link href="/undefined/17275.html"/>
      <url>/undefined/17275.html</url>
      
        <content type="html"><![CDATA[<h2 id="1004-Chaos-Begin"><a href="#1004-Chaos-Begin" class="headerlink" title="1004 Chaos Begin"></a><a href="http://acm.hdu.edu.cn/showproblem.php?pid=7303">1004 Chaos Begin</a></h2><p>题意：给定$2*n$个点，有一半的点为初始点，另一半为初始点平移$(Δx,Δy)$后得到，求可能的$(Δx,Δy)$。</p><p>思路：如果$(dx,dy)$满足条件，那么$(-dx,-dy)$肯定也满足条件。</p><p>假做法：先假定$dx&gt;=0$，那么横坐标最小的点一定是变化前的点，将其与其他$(2*n-1)$个点作差，得到可能的$(Δx,Δy)$，然后从小到大遍历每个点，如果该点没被访问过且不存在存在$(x+Δx,y+Δy)$也没被访问过，说明当前的$(Δx,Δy)$不合法。这个方案会被重合的点，多点共线的时候卡到$O(n^2log(n))$,但是题目说明数据随机，所以以下做法可以通过此题。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line">cin&gt;&gt;n;</span><br><span class="line">n*=<span class="number">2</span>;</span><br><span class="line">vector&lt;pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt;&gt;<span class="built_in">p</span>(n);</span><br><span class="line"><span class="built_in">rep</span>(i,<span class="number">0</span>,n<span class="number">-1</span>)</span><br><span class="line">&#123;</span><br><span class="line">cin&gt;&gt;p[i].fi;</span><br><span class="line">cin&gt;&gt;p[i].se;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">sort</span>(p.<span class="built_in">begin</span>(),p.<span class="built_in">end</span>());</span><br><span class="line">map&lt;pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt;,<span class="type">int</span>&gt;f;</span><br><span class="line">vector&lt;pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt;&gt; ans;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> v:p)f[v]++;</span><br><span class="line"><span class="built_in">rep</span>(i,<span class="number">1</span>,n<span class="number">-1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> dx=p[i].fi-p[<span class="number">0</span>].fi;</span><br><span class="line"><span class="type">int</span> dy=p[i].se-p[<span class="number">0</span>].se;</span><br><span class="line">vector&lt;pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt;&gt; tmp;</span><br><span class="line"><span class="type">bool</span> flag=<span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">rep</span>(j,<span class="number">0</span>,n<span class="number">-1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(f[p[j]])</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(f[&#123;p[j].fi+dx,p[j].se+dy&#125;])</span><br><span class="line">&#123;</span><br><span class="line">f[&#123;p[j].fi+dx,p[j].se+dy&#125;]--;</span><br><span class="line">f[p[j]]--;</span><br><span class="line">tmp.<span class="built_in">pb</span>(p[j]);</span><br><span class="line">tmp.<span class="built_in">pb</span>(&#123;p[j].fi+dx,p[j].se+dy&#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> v:tmp) f[v]++;<span class="comment">//恢复初始化</span></span><br><span class="line">flag=<span class="literal">true</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(flag) <span class="keyword">continue</span>;</span><br><span class="line">ans.<span class="built_in">pb</span>(&#123;dx,dy&#125;);</span><br><span class="line">ans.<span class="built_in">pb</span>(&#123;-dx,-dy&#125;);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> v:tmp) f[v]++;<span class="comment">//恢复初始化</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">sort</span>(ans.<span class="built_in">begin</span>(),ans.<span class="built_in">end</span>());</span><br><span class="line"><span class="type">int</span> len=<span class="built_in">unique</span>(ans.<span class="built_in">begin</span>(),ans.<span class="built_in">end</span>())-ans.<span class="built_in">begin</span>();</span><br><span class="line">cout&lt;&lt;len&lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;len;i++)cout&lt;&lt;ans[i].first&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;ans[i].second&lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>真做法：来源于官方题解，代码待补充。</p><p>考虑原始n个点的凸包，将它复制一份，沿着向量$(∆x,∆y)$平移的过程将会拉扯出两条 平行边，边的两端点恰好对应平移前后的一对点，且差值为$(∆x,∆y)$。这启发我们找到输入的 2n 个点的凸包，枚举凸包上的一条边，再枚举边上的两个点，作差得到一个可能的(∆x,∆y)， 检查它是否合法。由于点的坐标在给定的正方形范围内随机，因此一个点集的凸包的期望顶点 数为O(logn)，需要检查的次数也为$O(logn)$。 对于一个待检查的$(∆x,∆y)$，如果 $(−∆x,−∆y)$ 检查过，则无需重复检查。否则不妨设 $∆x ≥0$ 且$∆y≥0$，找到2n个点中横坐标最小的点，如果有多个则取纵坐标最小的点，那么 它一定属于原始的n个点，将它$(x,y)$与$(x+∆x,y+∆y)$配对并删去，重复n次即可。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 杭电多校 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网站文章测试</title>
      <link href="/undefined/23117.html"/>
      <url>/undefined/23117.html</url>
      
        <content type="html"><![CDATA[<h2 id="头文件和预处理-def-int-ll"><a href="#头文件和预处理-def-int-ll" class="headerlink" title="头文件和预处理(def int ll)"></a>头文件和预处理(def int ll)</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> debug(a) cout&lt;&lt;#a&lt;&lt;<span class="string">&quot;=&quot;</span>&lt;&lt;a&lt;&lt;endl;</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pause system(<span class="string">&quot;pause&quot;</span>)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mem(a, b) memset(a, b, sizeof(a))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> rep(i,a,b) for(int i=(a),__##i##__=(b);i&lt;=__##i##__;i++)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> dwn(i,a,b) for(int i=(a),__##i##__=(b);i&gt;=__##i##__;i--)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mkpr make_pair</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> sz(x) ((int)x.size())</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> se second</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int ll</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> ull;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function">T <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">T x=<span class="number">0</span>;<span class="type">int</span> f=<span class="number">1</span>;<span class="type">char</span> ch=<span class="built_in">getchar</span>();</span><br><span class="line"><span class="keyword">while</span>(ch!=EOF&amp;&amp;!<span class="built_in">isdigit</span>(ch)) f=(ch==<span class="string">&#x27;-&#x27;</span>?<span class="number">-1</span>:<span class="number">1</span>),ch=<span class="built_in">getchar</span>();</span><br><span class="line"><span class="keyword">while</span> (ch!=EOF&amp;&amp;<span class="built_in">isdigit</span>(ch)) x=x*<span class="number">10</span>+ch-<span class="string">&#x27;0&#x27;</span>,ch=<span class="built_in">getchar</span>();</span><br><span class="line"><span class="keyword">return</span> x*f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> rdi read<span class="string">&lt;int&gt;</span>()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> rdl read<span class="string">&lt;ll&gt;</span>()</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">print</span><span class="params">(<span class="type">int</span> n)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(n&lt;<span class="number">0</span>)&#123;</span><br><span class="line"><span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>);</span><br><span class="line">n*=<span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(n&gt;<span class="number">9</span>) <span class="built_in">print</span>(n/<span class="number">10</span>);</span><br><span class="line"><span class="built_in">putchar</span>(n % <span class="number">10</span> + <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> T=rdi;</span><br><span class="line"><span class="comment">//int T=1;</span></span><br><span class="line"><span class="keyword">while</span>(T--)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">solve</span>();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="取消同步流"><a href="#取消同步流" class="headerlink" title="取消同步流"></a>取消同步流</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ios::sync_with_stdio(false);</span><br><span class="line">cin.tie(0);</span><br></pre></td></tr></table></figure><h2 id="优先队列"><a href="#优先队列" class="headerlink" title="优先队列"></a>优先队列</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">priority_queue&lt;<span class="type">int</span>,vector&lt;<span class="type">int</span>&gt;,greater&lt;<span class="type">int</span>&gt; &gt; q; <span class="comment">//定义优先队列，升序 </span></span><br><span class="line"><span class="type">int</span> n,a,b;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;a);</span><br><span class="line">        <span class="keyword">if</span>(a==<span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;b);</span><br><span class="line">            q.<span class="built_in">push</span>(b); <span class="comment">//把b压入优先队列</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(a==<span class="number">2</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> ans=q.<span class="built_in">top</span>(); <span class="comment">//获取现在优先级最高的元素的值</span></span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,ans); <span class="comment">//输出答案</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(a==<span class="number">3</span>)</span><br><span class="line">            q.<span class="built_in">pop</span>(); <span class="comment">//将优先级最高的元素弹出</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="ST表（区间最值问题）"><a href="#ST表（区间最值问题）" class="headerlink" title="ST表（区间最值问题）"></a>ST表（区间最值问题）</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;n,&amp;m);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;a);</span><br><span class="line">        f[i][<span class="number">0</span>]=a;</span><br><span class="line">    &#125;</span><br><span class="line">    LC=(<span class="type">int</span>)(<span class="built_in">log</span>(n)/<span class="built_in">log</span>(<span class="number">2</span>));</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=LC;j++)</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n-(<span class="number">1</span>&lt;&lt;j)+<span class="number">1</span>;i++)</span><br><span class="line">    f[i][j]=<span class="built_in">max</span>(f[i][j<span class="number">-1</span>],f[i+(<span class="number">1</span>&lt;&lt;(j<span class="number">-1</span>))][j<span class="number">-1</span>]);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;i++) </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;l,&amp;r);</span><br><span class="line">  p=(<span class="type">int</span>)(<span class="built_in">log</span>(r-l+<span class="number">1</span>)/<span class="built_in">log</span>(<span class="number">2</span>));</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="built_in">max</span>(f[l][p],f[r-(<span class="number">1</span>&lt;&lt;p)+<span class="number">1</span>][p]));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="字典树"><a href="#字典树" class="headerlink" title="字典树"></a>字典树</h2><p>给定n个模式串 s1, s2,…… sn和 q次询问，每次询问给定一个文本串 ti，请回答 s1~ sn中有多少个字符串 sj 满足 ti 是 sj的<strong>前缀</strong>。</p><p>一个字符串 t 是 s 的前缀当且仅当从 s 的末尾删去若干个（可以为 0 个）连续的字符后与 s 相同。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">getnum</span><span class="params">(<span class="type">char</span> x)</span><span class="comment">//映射字符</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x&gt;=<span class="string">&#x27;A&#x27;</span>&amp;&amp;x&lt;=<span class="string">&#x27;Z&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> x-<span class="string">&#x27;A&#x27;</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(x&gt;=<span class="string">&#x27;a&#x27;</span>&amp;&amp;x&lt;=<span class="string">&#x27;z&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> x-<span class="string">&#x27;a&#x27;</span>+<span class="number">26</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> x-<span class="string">&#x27;0&#x27;</span>+<span class="number">52</span>;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">insert</span><span class="params">(<span class="type">char</span> str[])</span><span class="comment">//插入字符串</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> p=<span class="number">0</span>,len=<span class="built_in">strlen</span>(str);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;len;i++)&#123;</span><br><span class="line">        <span class="type">int</span> c=<span class="built_in">getnum</span>(str[i]);</span><br><span class="line">        <span class="keyword">if</span>(!t[p][c])</span><br><span class="line">            t[p][c]=++idx;</span><br><span class="line">        p=t[p][c];</span><br><span class="line">        cnt[p]++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">char</span> str[])</span><span class="comment">//查询</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> p=<span class="number">0</span>,len=<span class="built_in">strlen</span>(str);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;len;i++)&#123;</span><br><span class="line">        <span class="type">int</span> c=<span class="built_in">getnum</span>(str[i]);</span><br><span class="line">        <span class="keyword">if</span>(!t[p][c])</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        p=t[p][c];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> cnt[p];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;T);</span><br><span class="line">    <span class="keyword">while</span>(T--)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;=idx;i++)</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;=<span class="number">122</span>;j++)</span><br><span class="line">                t[i][j]=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;=idx;i++)</span><br><span class="line">            cnt[i]=<span class="number">0</span>;</span><br><span class="line">        idx=<span class="number">0</span>;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;n,&amp;q);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,s);</span><br><span class="line">            <span class="built_in">insert</span>(s);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=q;i++)&#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,s);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="built_in">find</span>(s));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="并查集"><a href="#并查集" class="headerlink" title="并查集"></a>并查集</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(f[k]==k)<span class="keyword">return</span> k;</span><br><span class="line">    <span class="keyword">return</span> f[k]=<span class="built_in">find</span>(f[k]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="最小生成树"><a href="#最小生成树" class="headerlink" title="最小生成树"></a>最小生成树</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">edge</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> head,tail,len;</span><br><span class="line">&#125;a[<span class="number">200086</span>]; </span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">roots</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> f[x]==x?x:f[x]=<span class="built_in">roots</span>(f[x]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">cmp</span><span class="params">(edge x,edge y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> x.len&lt;y.len;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> n,m;</span><br><span class="line"><span class="type">int</span> ans=<span class="number">0</span>;</span><br><span class="line">cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">&#123;</span><br><span class="line">cin&gt;&gt;a[i].head&gt;&gt;a[i].tail&gt;&gt;a[i].len;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">sort</span>(a+<span class="number">1</span>,a+<span class="number">1</span>+m,cmp);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++) f[i]=i;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">roots</span>(a[i].head)==<span class="built_in">roots</span>(a[i].tail)) <span class="keyword">continue</span>;</span><br><span class="line">f[<span class="built_in">roots</span>(a[i].head)]=<span class="built_in">roots</span>(a[i].tail);</span><br><span class="line">&#123;</span><br><span class="line">ans+=a[i].len;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n<span class="number">-1</span>;i++)</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">roots</span>(i)!=<span class="built_in">roots</span>(i+<span class="number">1</span>))</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;orz&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,ans);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="线段树"><a href="#线段树" class="headerlink" title="线段树"></a>线段树</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">Segment_Tree</span> &#123;</span><br><span class="line">ll sum, add, mul;</span><br><span class="line"><span class="type">int</span> l, r;</span><br><span class="line">&#125;s[MAXN * <span class="number">4</span>];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">pushup</span><span class="params">(<span class="type">int</span> pos)</span> <span class="comment">//更新子节点的值</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">s[pos].sum = (s[pos &lt;&lt; <span class="number">1</span>].sum + s[pos &lt;&lt; <span class="number">1</span> | <span class="number">1</span>].sum) % mod;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">pushdown</span><span class="params">(<span class="type">int</span> pos)</span> </span>&#123; <span class="comment">//pushdown的维护</span></span><br><span class="line">s[pos &lt;&lt; <span class="number">1</span>].sum = (s[pos &lt;&lt; <span class="number">1</span>].sum * s[pos].mul + s[pos].add * (s[pos &lt;&lt; <span class="number">1</span>].r - s[pos &lt;&lt; <span class="number">1</span>].l + <span class="number">1</span>)) % mod;</span><br><span class="line">s[pos &lt;&lt; <span class="number">1</span> | <span class="number">1</span>].sum = (s[pos &lt;&lt; <span class="number">1</span> | <span class="number">1</span>].sum * s[pos].mul + s[pos].add * (s[pos &lt;&lt; <span class="number">1</span> | <span class="number">1</span>].r - s[pos &lt;&lt; <span class="number">1</span> | <span class="number">1</span>].l + <span class="number">1</span>)) % mod;</span><br><span class="line"></span><br><span class="line">s[pos &lt;&lt; <span class="number">1</span>].mul = (s[pos &lt;&lt; <span class="number">1</span>].mul * s[pos].mul) % mod;</span><br><span class="line">s[pos &lt;&lt; <span class="number">1</span> | <span class="number">1</span>].mul = (s[pos &lt;&lt; <span class="number">1</span> | <span class="number">1</span>].mul * s[pos].mul) % mod;</span><br><span class="line"></span><br><span class="line">s[pos &lt;&lt; <span class="number">1</span>].add = (s[pos &lt;&lt; <span class="number">1</span>].add * s[pos].mul + s[pos].add) % mod;</span><br><span class="line">s[pos &lt;&lt; <span class="number">1</span> | <span class="number">1</span>].add = (s[pos &lt;&lt; <span class="number">1</span> | <span class="number">1</span>].add * s[pos].mul + s[pos].add) % mod;</span><br><span class="line"></span><br><span class="line">s[pos].add = <span class="number">0</span>;</span><br><span class="line">s[pos].mul = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">return</span>; </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">build_tree</span><span class="params">(<span class="type">int</span> pos, <span class="type">int</span> l, <span class="type">int</span> r)</span> </span>&#123; <span class="comment">//建树</span></span><br><span class="line">s[pos].l = l;</span><br><span class="line">s[pos].r = r;</span><br><span class="line">s[pos].mul = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (l == r) &#123;</span><br><span class="line">s[pos].sum = a[l] % mod;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line"><span class="built_in">build_tree</span>(pos &lt;&lt; <span class="number">1</span>, l, mid);</span><br><span class="line"><span class="built_in">build_tree</span>(pos &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, mid + <span class="number">1</span>, r);</span><br><span class="line"><span class="built_in">pushup</span>(pos);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ChangeMul</span><span class="params">(<span class="type">int</span> pos, <span class="type">int</span> x, <span class="type">int</span> y, <span class="type">int</span> k)</span> </span>&#123; <span class="comment">//区间乘法</span></span><br><span class="line"><span class="keyword">if</span> (x &lt;= s[pos].l &amp;&amp; s[pos].r &lt;= y) &#123;</span><br><span class="line">s[pos].add = (s[pos].add * k) % mod;</span><br><span class="line">s[pos].mul = (s[pos].mul * k) % mod;</span><br><span class="line">s[pos].sum = (s[pos].sum * k) % mod;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">pushdown</span>(pos);</span><br><span class="line"><span class="type">int</span> mid = (s[pos].l + s[pos].r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (x &lt;= mid) <span class="built_in">ChangeMul</span>(pos &lt;&lt; <span class="number">1</span>, x, y, k);</span><br><span class="line"><span class="keyword">if</span> (y &gt; mid) <span class="built_in">ChangeMul</span>(pos &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, x, y, k);</span><br><span class="line"><span class="built_in">pushup</span>(pos);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ChangeAdd</span><span class="params">(<span class="type">int</span> pos, <span class="type">int</span> x, <span class="type">int</span> y, <span class="type">int</span> k)</span> </span>&#123; <span class="comment">//区间加法</span></span><br><span class="line"><span class="keyword">if</span> (x &lt;= s[pos].l &amp;&amp; s[pos].r &lt;= y) &#123;</span><br><span class="line">s[pos].add = (s[pos].add + k) % mod;</span><br><span class="line">s[pos].sum = (s[pos].sum + k * (s[pos].r - s[pos].l + <span class="number">1</span>)) % mod;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">pushdown</span>(pos);</span><br><span class="line"><span class="type">int</span> mid = (s[pos].l + s[pos].r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (x &lt;= mid) <span class="built_in">ChangeAdd</span>(pos &lt;&lt; <span class="number">1</span>, x, y, k);</span><br><span class="line"><span class="keyword">if</span> (y &gt; mid) <span class="built_in">ChangeAdd</span>(pos &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, x, y, k);</span><br><span class="line"><span class="built_in">pushup</span>(pos);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">AskRange</span><span class="params">(<span class="type">int</span> pos, <span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123; <span class="comment">//区间询问</span></span><br><span class="line"><span class="keyword">if</span> (x &lt;= s[pos].l &amp;&amp; s[pos].r &lt;= y) &#123;</span><br><span class="line"><span class="keyword">return</span> s[pos].sum;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">pushdown</span>(pos);</span><br><span class="line">ll val = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> mid = (s[pos].l + s[pos].r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (x &lt;= mid) val = (val + <span class="built_in">AskRange</span>(pos &lt;&lt; <span class="number">1</span>, x, y)) % mod;</span><br><span class="line"><span class="keyword">if</span> (y &gt; mid) val = (val + <span class="built_in">AskRange</span>(pos &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, x, y)) % mod;</span><br><span class="line"><span class="keyword">return</span> val;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="乘法逆元-EXgcd"><a href="#乘法逆元-EXgcd" class="headerlink" title="乘法逆元(EXgcd)"></a>乘法逆元(EXgcd)</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">Exgcd</span><span class="params">(ll a, ll b, ll &amp;x, ll &amp;y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!b) x = <span class="number">1</span>, y = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="built_in">Exgcd</span>(b, a % b, y, x), y -= a / b * x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ll x, y;</span><br><span class="line">    <span class="built_in">Exgcd</span> (a, p, x, y);</span><br><span class="line">    x = (x % p + p) % p;</span><br><span class="line">    <span class="built_in">printf</span> (<span class="string">&quot;%d\n&quot;</span>, x); <span class="comment">//x是a在mod p下的逆元</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="线性逆元"><a href="#线性逆元" class="headerlink" title="线性逆元"></a>线性逆元</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">inv[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">2</span>; i &lt; p; ++ i)</span><br><span class="line">    inv[i] = (p - p / i) * inv[p % i] % p;</span><br></pre></td></tr></table></figure><h2 id="快速幂逆元-a-p−2-mod-p"><a href="#快速幂逆元-a-p−2-mod-p" class="headerlink" title="快速幂逆元 a^(p−2) (mod p)"></a>快速幂逆元 a^(p−2) (mod p)</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">ll <span class="title">fpm</span><span class="params">(ll x, ll power, ll mod)</span> </span>&#123;</span><br><span class="line">    x %= mod;</span><br><span class="line">    ll ans = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (; power; power &gt;&gt;= <span class="number">1</span>, (x *= x) %= mod)</span><br><span class="line">    <span class="keyword">if</span>(power &amp; <span class="number">1</span>) (ans *= x) %= mod;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">inv</span><span class="params">(ll a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">fpm</span>(a, p - <span class="number">2</span>, p);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ll x = <span class="built_in">fpm</span>(a, p - <span class="number">2</span>, p); <span class="comment">//x为a在mod p意义下的逆元</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="线性筛素数"><a href="#线性筛素数" class="headerlink" title="线性筛素数"></a>线性筛素数</h2><h4 id="欧拉筛"><a href="#欧拉筛" class="headerlink" title="欧拉筛"></a>欧拉筛</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">bool</span> isPrime[<span class="number">100000010</span>];</span><br><span class="line"><span class="comment">//isPrime[i] == 1表示：i是素数</span></span><br><span class="line"><span class="type">int</span> Prime[<span class="number">6000010</span>], cnt = <span class="number">0</span>;</span><br><span class="line"><span class="comment">//Prime存质数</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">GetPrime</span><span class="params">(<span class="type">int</span> n)</span><span class="comment">//筛到n</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">memset</span>(isPrime, <span class="number">1</span>, <span class="built_in">sizeof</span>(isPrime));</span><br><span class="line"><span class="comment">//以“每个数都是素数”为初始状态，逐个删去</span></span><br><span class="line">isPrime[<span class="number">1</span>] = <span class="number">0</span>;<span class="comment">//1不是素数</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">2</span>; i &lt;= n; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(isPrime[i])<span class="comment">//没筛掉 </span></span><br><span class="line">Prime[++cnt] = i; <span class="comment">//i成为下一个素数</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>; j &lt;= cnt &amp;&amp; i*Prime[j] &lt;= n<span class="comment">/*不超上限*/</span>; j++) </span><br><span class="line">&#123;</span><br><span class="line">        <span class="comment">//从Prime[1]，即最小质数2开始，逐个枚举已知的质数，并期望Prime[j]是(i*Prime[j])的最小质因数</span></span><br><span class="line">            <span class="comment">//当然，i肯定比Prime[j]大，因为Prime[j]是在i之前得出的</span></span><br><span class="line">isPrime[i*Prime[j]] = <span class="number">0</span>;</span><br><span class="line">            </span><br><span class="line"><span class="keyword">if</span>(i % Prime[j] == <span class="number">0</span>)<span class="comment">//i中也含有Prime[j]这个因子</span></span><br><span class="line"><span class="keyword">break</span>; <span class="comment">//重要步骤。见原理</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="字符串hash"><a href="#字符串hash" class="headerlink" title="字符串hash"></a>字符串hash</h2><h5 id="给定-N-个字符串（第-i-个字符串长度为-Mi，字符串内包含数字、大小写字母，大小写敏感），请求出-N-个字符串中共有多少个不同的字符串。"><a href="#给定-N-个字符串（第-i-个字符串长度为-Mi，字符串内包含数字、大小写字母，大小写敏感），请求出-N-个字符串中共有多少个不同的字符串。" class="headerlink" title="给定 N 个字符串（第 i 个字符串长度为 Mi，字符串内包含数字、大小写字母，大小写敏感），请求出 N 个字符串中共有多少个不同的字符串。"></a>给定 <em>N</em> 个字符串（第 <em>i</em> 个字符串长度为 Mi，字符串内包含数字、大小写字母，大小写敏感），请求出 <em>N</em> 个字符串中共有多少个不同的字符串。</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">ull <span class="title">hash</span><span class="params">(<span class="type">char</span> s[])</span></span>&#123;</span><br><span class="line">    ull ans=<span class="number">0</span>,len=<span class="built_in">strlen</span>(s);</span><br><span class="line">    <span class="keyword">for</span>(ll i=<span class="number">0</span>;i&lt;len;i++)&#123;</span><br><span class="line">        ans=base*ans+(ull)s[i];</span><br><span class="line">        <span class="comment">//这里不使用mod让它自然溢出，定义为ull的数在超过2^32的时候会自然溢出</span></span><br><span class="line">        <span class="comment">//如果把这个换成上面的hash就会400ms+</span></span><br><span class="line">        <span class="comment">//所以说自然溢出大法好</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(n);</span><br><span class="line">    <span class="keyword">for</span>(ll i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,a);</span><br><span class="line">        f[i]=<span class="built_in">hash</span>(a);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">sort</span>(f+<span class="number">1</span>,f+n+<span class="number">1</span>);ll ans=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(ll i=<span class="number">1</span>;i&lt;n;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(f[i]!=f[i+<span class="number">1</span>])ans++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">il ull <span class="title">hash1</span><span class="params">(<span class="type">char</span> s[])</span></span>&#123;</span><br><span class="line">    ll ans=<span class="number">0</span>,len=<span class="built_in">strlen</span>(s);</span><br><span class="line">    <span class="keyword">for</span>(ll i=<span class="number">0</span>;i&lt;len;i++)&#123;</span><br><span class="line">        ans=(base*ans+(ull)s[i])%mod1;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">il ull <span class="title">hash2</span><span class="params">(<span class="type">char</span> s[])</span></span>&#123;</span><br><span class="line">ll ans=<span class="number">0</span>,len=<span class="built_in">strlen</span>(s);</span><br><span class="line"><span class="keyword">for</span>(ll i=<span class="number">0</span>;i&lt;len;i++)&#123;</span><br><span class="line">ans=(base*ans+(ull)s[i])%mod2;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">il <span class="type">bool</span> <span class="title">cmp1</span><span class="params">(node a,node b)</span></span>&#123;<span class="keyword">return</span> a.x&lt;b.x;&#125;</span><br><span class="line"><span class="function">il <span class="type">bool</span> <span class="title">cmp2</span><span class="params">(node a,node b)</span></span>&#123;<span class="keyword">return</span> a.y&lt;b.y;&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(n);</span><br><span class="line">    <span class="keyword">for</span>(ll i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,a);</span><br><span class="line">        f[i].x=<span class="built_in">hash1</span>(a);</span><br><span class="line">        f[i].y=<span class="built_in">hash2</span>(a);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">sort</span>(f+<span class="number">1</span>,f+n+<span class="number">1</span>,cmp1);<span class="built_in">sort</span>(f+<span class="number">1</span>,f+n+<span class="number">1</span>,cmp2);</span><br><span class="line">ll ans=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(ll i=<span class="number">1</span>;i&lt;n;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(f[i].x!=f[i+<span class="number">1</span>].x||f[i].y!=f[i+<span class="number">1</span>].y)ans++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="KMP"><a href="#KMP" class="headerlink" title="KMP"></a>KMP</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%s%s&quot;</span>,a1,a2);</span><br><span class="line">    kmp[<span class="number">0</span>]=kmp[<span class="number">1</span>]=<span class="number">0</span>;<span class="comment">//前一位，两位失配了，都只可能将第一位作为新的开头</span></span><br><span class="line">    <span class="type">int</span> len1=<span class="built_in">strlen</span>(a1),len2=<span class="built_in">strlen</span>(a2);</span><br><span class="line">    <span class="type">int</span> k;</span><br><span class="line">    k=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;len2;i++)<span class="comment">//自己匹配自己</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">while</span>(k&amp;&amp;a2[i]!=a2[k])k=kmp[k];<span class="comment">//找到最长的前后缀重叠长度</span></span><br><span class="line">        kmp[i+<span class="number">1</span>]=a2[i]==a2[k]?++k:<span class="number">0</span>;<span class="comment">//不相等的情况，即无前缀能与后缀重叠，直接赋值位0（注意是给下一位，因为匹配的是下一位适失配的情况）</span></span><br><span class="line">    &#125;</span><br><span class="line">    k=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;len1;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">while</span>(k&amp;&amp;a1[i]!=a2[k])k=kmp[k];<span class="comment">//如果不匹配，则将利用kmp数组往回跳</span></span><br><span class="line">        k+=a1[i]==a2[k]?<span class="number">1</span>:<span class="number">0</span>;<span class="comment">//如果相等了，则匹配下一位</span></span><br><span class="line">        <span class="keyword">if</span>(k==len2)<span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,i-len2+<span class="number">2</span>);<span class="comment">//如果已经全部匹配完毕，则输出初始位置</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=len2;i++)<span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,kmp[i]);<span class="comment">//输出f数组</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="LCA-最近公共祖先"><a href="#LCA-最近公共祖先" class="headerlink" title="LCA(最近公共祖先)"></a>LCA(最近公共祖先)</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">vector&lt; pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt; &gt; query[N];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123;</span><br><span class="line">ver[++tot] = y;</span><br><span class="line">Next[tot] = head[x];</span><br><span class="line">head[x] = tot;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add_query</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y, <span class="type">int</span> id)</span> </span>&#123;</span><br><span class="line">query[x].<span class="built_in">push_back</span>(<span class="built_in">make_pair</span>(y, id));</span><br><span class="line">query[y].<span class="built_in">push_back</span>(<span class="built_in">make_pair</span>(x, id));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123; <span class="comment">//并查集查找操作</span></span><br><span class="line"><span class="keyword">if</span> (f[x] == x) <span class="keyword">return</span> x;</span><br><span class="line"><span class="keyword">return</span> f[x] = <span class="built_in">find</span>(f[x]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">marge</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123; <span class="comment">//并查集合并操作</span></span><br><span class="line">f[<span class="built_in">find</span>(y)] = <span class="built_in">find</span>(x);</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">tarjan</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">vis[x] = <span class="number">1</span>; <span class="comment">//标记当前节点表示已经被访问</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = head[x]; i; i = Next[i]) &#123;</span><br><span class="line"><span class="type">int</span> y = ver[i]; <span class="comment">//ver表示当前节点的孩子</span></span><br><span class="line"><span class="keyword">if</span> (vis[y]) <span class="comment">//如果孩子已经被访问</span></span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line"><span class="built_in">tarjan</span>(y);</span><br><span class="line">f[y] = x; <span class="comment">//将孩子的父亲标记为自己（并入同一集合）</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; query[x].<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line"><span class="type">int</span> y = query[x][i].first, id = query[x][i].second;</span><br><span class="line"><span class="keyword">if</span> (vis[y] == <span class="number">2</span>)</span><br><span class="line">ans[id] = <span class="built_in">find</span>(y);</span><br><span class="line">&#125;</span><br><span class="line">vis[x] = <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">cin &gt;&gt; n &gt;&gt; m &gt;&gt; s;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) f[i] = i;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line"><span class="type">int</span> x, y;</span><br><span class="line">cin &gt;&gt; x &gt;&gt; y;</span><br><span class="line"><span class="built_in">add</span>(x, y);</span><br><span class="line"><span class="built_in">add</span>(y, x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; i++) &#123;</span><br><span class="line"><span class="type">int</span> a, b;</span><br><span class="line">cin &gt;&gt; a &gt;&gt; b;</span><br><span class="line"><span class="keyword">if</span> (a == b)</span><br><span class="line">ans[i] = a;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">add_query</span>(a, b, i); <span class="comment">//添加两个查询对象之间的关联</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">tarjan</span>(s);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; i++)</span><br><span class="line">cout &lt;&lt; ans[i] &lt;&lt; endl;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="快速幂"><a href="#快速幂" class="headerlink" title="快速幂"></a>快速幂</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">quickPower</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b,<span class="type">int</span> mod)</span><span class="comment">//是求a的b次方</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> ans = <span class="number">1</span>, base = a;<span class="comment">//ans为答案，base为a^(2^n)</span></span><br><span class="line"><span class="keyword">while</span>(b &gt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line"><span class="keyword">if</span>(b &amp; <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">ans *= base;</span><br><span class="line">            ans %= mod;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">        base *= base;</span><br><span class="line">        base %= mod;</span><br><span class="line">b &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="单调队列-滑动窗口-尺取法"><a href="#单调队列-滑动窗口-尺取法" class="headerlink" title="单调队列/滑动窗口/尺取法"></a>单调队列/滑动窗口/尺取法</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">monotone_min</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> head = <span class="number">1</span>, tail = <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">register</span> <span class="type">int</span> i = <span class="number">1</span>; i &lt;= N; ++i) &#123;</span><br><span class="line">        <span class="keyword">while</span> (head &lt; tail &amp;&amp; a[i] &lt;= q2[tail - <span class="number">1</span>]) tail--;</span><br><span class="line">        <span class="keyword">while</span> (head &lt; tail &amp;&amp; p2[head] &lt;= i - K) head++;</span><br><span class="line">        q2[tail] = a[i], p2[tail++] = i;</span><br><span class="line">        <span class="keyword">if</span> (i &gt;= K)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, q2[head]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">monotone_max</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> head = <span class="number">1</span>, tail = <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">register</span> <span class="type">int</span> i = <span class="number">1</span>; i &lt;= N; ++i) &#123;</span><br><span class="line">        <span class="keyword">while</span> (head &lt; tail &amp;&amp; a[i] &gt;= q1[tail - <span class="number">1</span>]) tail--;</span><br><span class="line">        <span class="keyword">while</span> (head &lt; tail &amp;&amp; p1[head] &lt;= i - K) head++;</span><br><span class="line">        q1[tail] = a[i], p1[tail++] = i;</span><br><span class="line">        <span class="keyword">if</span> (i &gt;= K)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, q1[head]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;N, &amp;K);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">register</span> <span class="type">int</span> i = <span class="number">1</span>; i &lt;= N; ++i)</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;a[i]);</span><br><span class="line">    <span class="built_in">monotone_min</span>();</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    <span class="built_in">monotone_max</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="最短路"><a href="#最短路" class="headerlink" title="最短路"></a>最短路</h2><h4 id="dijstra-堆优化ver"><a href="#dijstra-堆优化ver" class="headerlink" title="dijstra(堆优化ver)"></a>dijstra(堆优化ver)</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">edge</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> to, dis, next;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">edge e[MaxM];</span><br><span class="line"><span class="type">int</span> head[MaxN], dis[MaxN], cnt;</span><br><span class="line"><span class="type">bool</span> vis[MaxN];</span><br><span class="line"><span class="type">int</span> n, m, s;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">add_edge</span><span class="params">( <span class="type">int</span> u, <span class="type">int</span> v, <span class="type">int</span> d )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cnt++;</span><br><span class="line">    e[cnt].dis = d;</span><br><span class="line">    e[cnt].to = v;</span><br><span class="line">    e[cnt].next = head[u];</span><br><span class="line">    head[u] = cnt;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> dis;</span><br><span class="line">    <span class="type">int</span> pos;</span><br><span class="line">    <span class="type">bool</span> <span class="keyword">operator</span> &lt;( <span class="type">const</span> node &amp;x )<span class="type">const</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> x.dis &lt; dis;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">std::priority_queue&lt;node&gt; q;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">dijkstra</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    dis[s] = <span class="number">0</span>;</span><br><span class="line">    q.<span class="built_in">push</span>( ( node )&#123;<span class="number">0</span>, s&#125; );</span><br><span class="line">    <span class="keyword">while</span>( !q.<span class="built_in">empty</span>() )</span><br><span class="line">    &#123;</span><br><span class="line">        node tmp = q.<span class="built_in">top</span>();</span><br><span class="line">        q.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="type">int</span> x = tmp.pos, d = tmp.dis;</span><br><span class="line">        <span class="keyword">if</span>( vis[x] )</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        vis[x] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>( <span class="type">int</span> i = head[x]; i; i = e[i].next )</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> y = e[i].to;</span><br><span class="line">            <span class="keyword">if</span>( dis[y] &gt; dis[x] + e[i].dis )</span><br><span class="line">            &#123;</span><br><span class="line">                dis[y] = dis[x] + e[i].dis;</span><br><span class="line">                <span class="keyword">if</span>( !vis[y] )</span><br><span class="line">                &#123;</span><br><span class="line">                    q.<span class="built_in">push</span>( ( node )&#123;dis[y], y&#125; );</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>( <span class="string">&quot;%d%d%d&quot;</span>, &amp;n, &amp;m, &amp;s );</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)dis[i] = <span class="number">0x7fffffff</span>;</span><br><span class="line">    <span class="keyword">for</span>( <span class="keyword">register</span> <span class="type">int</span> i = <span class="number">0</span>; i &lt; m; ++i )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">register</span> <span class="type">int</span> u, v, d;</span><br><span class="line">        <span class="built_in">scanf</span>( <span class="string">&quot;%d%d%d&quot;</span>, &amp;u, &amp;v, &amp;d );</span><br><span class="line">        <span class="built_in">add_edge</span>( u, v, d );</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">dijkstra</span>();</span><br><span class="line">    <span class="keyword">for</span>( <span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++ )</span><br><span class="line">        <span class="built_in">printf</span>( <span class="string">&quot;%d &quot;</span>, dis[i] );</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="SPFA（负权回路）（前向星）"><a href="#SPFA（负权回路）（前向星）" class="headerlink" title="SPFA（负权回路）（前向星）"></a>SPFA（负权回路）（前向星）</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//SPFA </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span> </span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std; </span><br><span class="line"><span class="type">int</span> dis[<span class="number">500010</span>],n,m,f,g,w,t=<span class="number">1</span>,s,q[<span class="number">200000</span>],h,st[<span class="number">500010</span>],tot;</span><br><span class="line"><span class="type">bool</span> vis[<span class="number">100010</span>];</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">st[i]表示到达i点的最后一条边的编号； </span></span><br><span class="line"><span class="comment">dis[i]表示从起点到i点目前为止的最短距离； </span></span><br><span class="line"><span class="comment">vis[i]=true表示点i在队列里； </span></span><br><span class="line"><span class="comment">vis[i]=false表示点i不在队列里； </span></span><br><span class="line"><span class="comment">数组q是队列； </span></span><br><span class="line"><span class="comment">h是指队列的头指针，t是指队列的尾指针； </span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span> <span class="comment">//不开结构体，变量有点乱，所以开结构体； </span></span><br><span class="line">&#123; </span><br><span class="line">    <span class="type">int</span> to;<span class="comment">//这条边连接的终点； </span></span><br><span class="line">    <span class="type">int</span> v;<span class="comment">//这条边的长度； </span></span><br><span class="line">    <span class="type">int</span> last;<span class="comment">//前一条边； </span></span><br><span class="line">&#125;e[<span class="number">500010</span>]; </span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> from,<span class="type">int</span> to,<span class="type">int</span> val)</span></span></span><br><span class="line"><span class="function"><span class="comment">/*</span></span></span><br><span class="line"><span class="comment"><span class="function">val表示传入的这条边的权值； </span></span></span><br><span class="line"><span class="comment"><span class="function">from表示传入的这条边的起点； </span></span></span><br><span class="line"><span class="comment"><span class="function">to表示传入的这条边的终点； </span></span></span><br><span class="line"><span class="comment"><span class="function">*/</span></span></span><br><span class="line"><span class="function"></span>&#123;     </span><br><span class="line">    tot++;<span class="comment">//表示当前这条边的编号； </span></span><br><span class="line">    e[tot].to=to;<span class="comment">//更新当前这条边的终点； </span></span><br><span class="line">    e[tot].v=val;<span class="comment">//更新当前这条边的长度（权）； </span></span><br><span class="line">    e[tot].last=st[from];</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    e[tot].last表示的是当前读入的这条边的上一条边； </span></span><br><span class="line"><span class="comment">    st[from]表示的是 到当前读入的边为止（不包括这条边） 的上一条边的序号； </span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">    st[from]=tot;<span class="comment">//更新为 当前读入的边为止（包括这条边） 的上一条边的序号；</span></span><br><span class="line">&#125; </span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">SPFA</span><span class="params">()</span><span class="comment">//核心最短路；</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(h&lt;=t)<span class="comment">//队列不为空； </span></span><br><span class="line">    &#123;</span><br><span class="line">        h++; </span><br><span class="line">        <span class="type">int</span> u=q[h];<span class="comment">//取出队首</span></span><br><span class="line">        vis[u]=<span class="number">0</span>;<span class="comment">//队首出队</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=st[u]; i!=<span class="number">0</span>; i=e[i].last)</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">st[u]是指可以到达点u的上一条边，如果存在st[u]（也就是st[u]不为0，因为0是初始值），</span></span><br><span class="line"><span class="comment">说明有一条边可以到达点u。所以i变成st[u]。e[i].last是指可以到达st[u]这条边的起点的边的编号</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> v=e[i].to;</span><br><span class="line">            <span class="keyword">if</span>(dis[v]&gt;dis[u]+e[i].v)</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">如果从起点到v的距离大于从起点到点i，再从点i到点u，再从点u到点v的距离，更新从起点</span></span><br><span class="line"><span class="comment">到点v的最短路； </span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">            &#123;</span><br><span class="line">                dis[v]=dis[u]+e[i].v;</span><br><span class="line">                <span class="keyword">if</span>(vis[v]==<span class="number">0</span>)<span class="comment">//没有入过队就入队； </span></span><br><span class="line">                &#123;</span><br><span class="line">                    vis[v]=<span class="number">1</span>;<span class="comment">//标志改为1，表示已经入队； </span></span><br><span class="line">                    t++;</span><br><span class="line">                    q[t]=v; </span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; </span><br><span class="line">&#125;  </span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> <span class="comment">//主程序； </span></span></span><br><span class="line"><span class="function"></span>&#123;  </span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d %d %d&quot;</span>,&amp;n,&amp;m,&amp;s); </span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;i++) </span><br><span class="line">    &#123; </span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d %d %d&quot;</span>,&amp;f,&amp;g,&amp;w);<span class="comment">//输入这条边的起点f，终点g和长度w;  </span></span><br><span class="line">        <span class="built_in">add</span>(f,g,w);<span class="comment">//建图;</span></span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)<span class="comment">//因为题目要我们求一个点到其余点的最短路; </span></span><br><span class="line">        dis[i]=<span class="number">2147483647</span>;<span class="comment">//所以初始化全部赋为int的最大值; </span></span><br><span class="line">    dis[s]=<span class="number">0</span>;<span class="comment">//起点到本身的的距离为0;</span></span><br><span class="line">    q[t]=s;<span class="comment">//起点入队； </span></span><br><span class="line">    vis[s]=<span class="literal">true</span>;<span class="comment">//标志改为true表示起点已入队； </span></span><br><span class="line">    <span class="built_in">SPFA</span>(); <span class="comment">//运行最短路； </span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)<span class="comment">//循环输出答案； </span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,dis[i]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="背包"><a href="#背包" class="headerlink" title="背包"></a>背包</h2><h4 id="01背包-二维"><a href="#01背包-二维" class="headerlink" title="01背包 二维"></a>01背包 二维</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> t,m,res=<span class="number">-1</span>;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;t,&amp;m);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;w[i],&amp;val[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;i++) </span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=t;j&gt;=<span class="number">0</span>;j--)  </span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(j&gt;=w[i])</span><br><span class="line">            &#123;</span><br><span class="line">                dp[i][j]=<span class="built_in">max</span>(dp[i<span class="number">-1</span>][j-w[i]]+val[i],dp[i<span class="number">-1</span>][j]);</span><br><span class="line">            &#125;  </span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                dp[i][j]=dp[i<span class="number">-1</span>][j];</span><br><span class="line">            &#125;              </span><br><span class="line">        &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,dp[m][t]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="01背包一维优化"><a href="#01背包一维优化" class="headerlink" title="01背包一维优化"></a>01背包一维优化</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> t,m,res=<span class="number">-1</span>;    </span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;t,&amp;m);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;w[i],&amp;val[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;i++) </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=t;j&gt;=<span class="number">0</span>;j--) </span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(j&gt;=w[i])</span><br><span class="line">            &#123;</span><br><span class="line">                dp[j]=<span class="built_in">max</span>(dp[j-w[i]]+val[i], dp[j]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,dp[t]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="完全背包"><a href="#完全背包" class="headerlink" title="完全背包"></a>完全背包</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%lld%lld&quot;</span>,&amp;m,&amp;n);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%lld%lld&quot;</span>,&amp;w[i],&amp;v[i]);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=w[i];j&lt;=m;j++)</span><br><span class="line">f[j]=<span class="built_in">max</span>(f[j],f[j-w[i]]+v[i]);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%lld&quot;</span>,f[m]);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="多重背包"><a href="#多重背包" class="headerlink" title="多重背包"></a>多重背包</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n,m;</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line">    <span class="type">int</span> number =<span class="number">1</span>;<span class="comment">//为了打表时候第一个物品下标是1</span></span><br><span class="line">    v[<span class="number">0</span>]=w[<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(n--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> weight;</span><br><span class="line">        <span class="type">int</span> value;</span><br><span class="line">        <span class="type">int</span> k;</span><br><span class="line">        cin&gt;&gt;weight&gt;&gt;value&gt;&gt;k;</span><br><span class="line">        <span class="comment">//二进制拆分</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>; j&lt;=k; j&lt;&lt;=<span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            w[number]=j*weight;</span><br><span class="line">            v[number]=j*value;</span><br><span class="line">            number++;</span><br><span class="line">            k-=j;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//此时的k很小了，与前面的所有出现过的j求和就是原来的k，并且这个组合 可以表示[0,原来k]数量   这就是二进制分解的妙处，还降低了时间复杂度</span></span><br><span class="line">        <span class="keyword">if</span>(k)</span><br><span class="line">        &#123;</span><br><span class="line">            w[number]=k*weight;</span><br><span class="line">            v[number]=k*value;</span><br><span class="line">            number++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> dp[MAXN][<span class="number">110</span>];</span><br><span class="line">    <span class="comment">// 0-1 背包打表</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;number; i++)<span class="comment">//这里0开始，是初始化和状态计算同时进行</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>; j&lt;=m; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(i==<span class="number">0</span>||j==<span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                dp[i][j]=<span class="number">0</span>;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            dp[i][j]=dp[i<span class="number">-1</span>][j];</span><br><span class="line">            <span class="keyword">if</span>(j&gt;=w[i])dp[i][j]=<span class="built_in">max</span>(dp[i][j],dp[i<span class="number">-1</span>][j-w[i]]+v[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;dp[number<span class="number">-1</span>][m]&lt;&lt;endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="treap动态平衡树"><a href="#treap动态平衡树" class="headerlink" title="treap动态平衡树"></a>treap动态平衡树</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> root,idx;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">1000019</span>,inf=<span class="number">1e9</span>;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span>&#123;</span><br><span class="line"><span class="type">int</span> l,r;</span><br><span class="line"><span class="type">int</span> key;</span><br><span class="line"><span class="type">int</span> val;</span><br><span class="line"><span class="type">int</span> size;</span><br><span class="line"><span class="type">int</span> cnt;</span><br><span class="line">&#125;tr[N];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">get</span><span class="params">(<span class="type">int</span> key)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">tr[++idx].key=key;</span><br><span class="line">tr[idx].val=<span class="built_in">rand</span>();</span><br><span class="line">tr[idx].size=tr[idx].cnt=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">return</span> idx;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">pushup</span><span class="params">(<span class="type">int</span> u)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">tr[u].size=tr[tr[u].l].size+tr[tr[u].r].size+tr[u].cnt;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">build</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">get</span>(-inf);</span><br><span class="line"><span class="built_in">get</span>(inf);</span><br><span class="line">root=<span class="number">1</span>;</span><br><span class="line">tr[<span class="number">1</span>].r=<span class="number">2</span>;</span><br><span class="line"><span class="built_in">pushup</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">zig</span><span class="params">(<span class="type">int</span> &amp;p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> q=tr[p].l;</span><br><span class="line">tr[p].l=tr[q].r;</span><br><span class="line">tr[q].r=p;</span><br><span class="line">p=q;</span><br><span class="line"><span class="built_in">pushup</span>(tr[p].r);</span><br><span class="line"><span class="built_in">pushup</span>(p);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">zag</span><span class="params">(<span class="type">int</span> &amp;p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> q =tr[p].r;</span><br><span class="line">tr[p].r=tr[q].l;</span><br><span class="line">tr[q].l=p;</span><br><span class="line">p=q;</span><br><span class="line"><span class="built_in">pushup</span>(tr[p].l);</span><br><span class="line"><span class="built_in">pushup</span>(p);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">insert</span><span class="params">(<span class="type">int</span> &amp;p,<span class="type">int</span> key)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(!p)</span><br><span class="line">&#123;</span><br><span class="line">p=<span class="built_in">get</span>(key);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(tr[p].key==key)</span><br><span class="line">tr[p].cnt++;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (tr[p].key&gt;key)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">insert</span>(tr[p].l,key);</span><br><span class="line"><span class="keyword">if</span>(tr[tr[p].l].val&gt;tr[p].val)</span><br><span class="line"><span class="built_in">zig</span>(p);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">insert</span>(tr[p].r,key);</span><br><span class="line"><span class="keyword">if</span>(tr[tr[p].r].val&gt;tr[p].val)</span><br><span class="line"><span class="built_in">zag</span>(p);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">pushup</span>(p);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">remove</span><span class="params">(<span class="type">int</span> &amp;u,<span class="type">int</span> key)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!u) <span class="keyword">return</span>;</span><br><span class="line"><span class="keyword">if</span> (tr[u].key==key)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(tr[u].cnt&gt;<span class="number">1</span>) tr[u].cnt--;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(tr[u].l||tr[u].r)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(!tr[u].r||tr[tr[u].l].val&gt;tr[tr[u].r].val)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">zig</span>(u);</span><br><span class="line"><span class="built_in">remove</span>(tr[u].r,key);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">zag</span>(u);</span><br><span class="line"><span class="built_in">remove</span>(tr[u].l,key);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">u=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(tr[u].key&gt;key)</span><br><span class="line"><span class="built_in">remove</span>(tr[u].l,key);</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">remove</span>(tr[u].r,key);</span><br><span class="line"><span class="built_in">pushup</span>(u);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">get_rank</span><span class="params">(<span class="type">int</span> p,<span class="type">int</span> key)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(!p) <span class="keyword">return</span> inf;</span><br><span class="line"><span class="keyword">if</span>(tr[p].key==key) <span class="keyword">return</span> tr[tr[p].l].size+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(tr[p].key&gt;key) <span class="keyword">return</span> <span class="built_in">get_rank</span>(tr[p].l,key);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">return</span>  tr[tr[p].l].size+tr[p].cnt+<span class="built_in">get_rank</span>(tr[p].r,key);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">get_key</span><span class="params">(<span class="type">int</span> p,<span class="type">int</span> rank)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(!p) <span class="keyword">return</span> -inf;</span><br><span class="line"><span class="keyword">if</span>(tr[tr[p].l].size&gt;=rank) </span><br><span class="line"><span class="keyword">return</span> <span class="built_in">get_key</span>(tr[p].l,rank);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(tr[tr[p].l].size+tr[p].cnt&gt;=rank)</span><br><span class="line"><span class="keyword">return</span> tr[p].key;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">return</span> <span class="built_in">get_key</span>(tr[p].r,rank-tr[tr[p].l].size-tr[p].cnt);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">get_pre</span><span class="params">(<span class="type">int</span> p,<span class="type">int</span> key)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(!p) <span class="keyword">return</span> -inf;</span><br><span class="line"><span class="keyword">if</span>(tr[p].key&gt;=key) <span class="keyword">return</span> <span class="built_in">get_pre</span>(tr[p].l,key);</span><br><span class="line"><span class="keyword">else</span> </span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">max</span>(tr[p].key,<span class="built_in">get_pre</span>(tr[p].r,key));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">get_next</span><span class="params">(<span class="type">int</span> p,<span class="type">int</span> key)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(!p) <span class="keyword">return</span> inf;</span><br><span class="line"><span class="keyword">if</span>(tr[p].key&lt;=key) <span class="keyword">return</span> <span class="built_in">get_next</span>(tr[p].r,key);</span><br><span class="line"><span class="keyword">else</span> </span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">min</span>(tr[p].key,<span class="built_in">get_next</span>(tr[p].l,key));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">build</span>();</span><br><span class="line"><span class="type">int</span> T=rdi;</span><br><span class="line"><span class="keyword">while</span>(T--)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> opt=rdi;</span><br><span class="line"><span class="type">int</span> x=rdi;</span><br><span class="line"><span class="keyword">if</span>(opt==<span class="number">1</span>) <span class="built_in">insert</span>(root,x);</span><br><span class="line"><span class="keyword">if</span>(opt==<span class="number">2</span>) <span class="built_in">remove</span>(root,x);</span><br><span class="line"><span class="keyword">if</span>(opt==<span class="number">3</span>) <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="built_in">get_rank</span>(root,x)<span class="number">-1</span>);</span><br><span class="line"><span class="keyword">if</span>(opt==<span class="number">4</span>) <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="built_in">get_key</span>(root,x+<span class="number">1</span>));</span><br><span class="line"><span class="keyword">if</span>(opt==<span class="number">5</span>) <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="built_in">get_pre</span>(root,x));</span><br><span class="line"><span class="keyword">if</span>(opt==<span class="number">6</span>) <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="built_in">get_next</span>(root,x));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="排列组合-带逆元"><a href="#排列组合-带逆元" class="headerlink" title="排列组合(带逆元)"></a>排列组合(带逆元)</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">fac[<span class="number">0</span>] = inv[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">fac[<span class="number">1</span>] = inv[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">2</span>; i &lt;= maxn - <span class="number">9</span>; ++i)<span class="comment">// 一定要从2开始</span></span><br><span class="line">fac[i] = fac[i<span class="number">-1</span>] * i % mod,</span><br><span class="line">inv[i] = (mod - mod / i) * inv[mod % i] % mod;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= maxn - <span class="number">9</span>; ++i)</span><br><span class="line">inv[i] = inv[i] * inv[i<span class="number">-1</span>] % mod;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">C</span><span class="params">(ll n, ll m)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(m &gt; n) <span class="keyword">return</span> <span class="number">0ll</span>;</span><br><span class="line"><span class="keyword">return</span> fac[n] * inv[m] % mod * inv[n-m] % mod;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="康托展开（给定排列，求其序数）（树状数组优化ver）"><a href="#康托展开（给定排列，求其序数）（树状数组优化ver）" class="headerlink" title="康托展开（给定排列，求其序数）（树状数组优化ver）"></a>康托展开（给定排列，求其序数）（树状数组优化ver）</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> N 1000001</span></span><br><span class="line"><span class="type">int</span> n,tr[N];</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> ans,fac[N];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (; x&lt;=n; x+=x&amp;-x) tr[x]+=k;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">query</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line"><span class="type">int</span> t=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (; x; x-=x&amp;-x) t+=tr[x];</span><br><span class="line"><span class="keyword">return</span> t;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">fac[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">1</span>; i&lt;=n; i++) &#123;</span><br><span class="line">fac[i]=fac[i<span class="number">-1</span>]*i%<span class="number">998244353</span>;</span><br><span class="line"><span class="built_in">add</span>(i,<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">1</span>,x; i&lt;=n; i++) &#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;x);</span><br><span class="line">ans=(ans+(<span class="built_in">query</span>(x)<span class="number">-1</span>)*fac[n-i])%<span class="number">998244353</span>;</span><br><span class="line"><span class="built_in">add</span>(x,<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%lld&quot;</span>,ans+<span class="number">1</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="逆康拓展开"><a href="#逆康拓展开" class="headerlink" title="逆康拓展开"></a>逆康拓展开</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">vector&lt;<span class="type">int</span>&gt;y;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ni_Cantor</span><span class="params">(<span class="type">int</span> len,<span class="type">int</span> num)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">     num=num<span class="number">-1</span>; <span class="comment">///注意</span></span><br><span class="line">    vector&lt;<span class="type">int</span>&gt;a;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=len;i++)</span><br><span class="line">        a.<span class="built_in">push_back</span>(i);</span><br><span class="line">      </span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=len;i++)&#123;</span><br><span class="line">        <span class="type">int</span> t=num/ans[len-i];</span><br><span class="line">        num=num%ans[len-i];</span><br><span class="line">        y.<span class="built_in">push_back</span>(a[t]); <span class="comment">///剩余数里第t+1个数为当前位 </span></span><br><span class="line">        a.<span class="built_in">erase</span>(a.<span class="built_in">begin</span>()+t); <span class="comment">///删除选做当前位的数</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="树状数组（使用例：维护前缀和数组实现区间加法）"><a href="#树状数组（使用例：维护前缀和数组实现区间加法）" class="headerlink" title="树状数组（使用例：维护前缀和数组实现区间加法）"></a>树状数组（使用例：维护前缀和数组实现区间加法）</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">long</span> <span class="type">long</span> tree[<span class="number">500005</span>];</span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> x, <span class="type">long</span> <span class="type">long</span> num)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (x &lt;= n) &#123;</span><br><span class="line">        tree[x] += num;</span><br><span class="line">        x += <span class="built_in">lowbit</span>(x);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">long</span> <span class="type">long</span> <span class="title">query</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (x) &#123;</span><br><span class="line">        ans += tree[x];</span><br><span class="line">        x -= <span class="built_in">lowbit</span>(x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> last = <span class="number">0</span>, now;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>, &amp;now);</span><br><span class="line">        <span class="built_in">add</span>(i, now - last);</span><br><span class="line">        last = now;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> flg;</span><br><span class="line">    <span class="keyword">while</span> (m--) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;flg);</span><br><span class="line">        <span class="keyword">if</span> (flg == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="type">int</span> x, y;</span><br><span class="line">            <span class="type">long</span> <span class="type">long</span> k;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%lld&quot;</span>, &amp;x, &amp;y, &amp;k);</span><br><span class="line">            <span class="built_in">add</span>(x, k);</span><br><span class="line">            <span class="built_in">add</span>(y + <span class="number">1</span>, -k);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (flg == <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="type">int</span> x;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;x);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, <span class="built_in">query</span>(x));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="EXGCD-线性同余方程求解"><a href="#EXGCD-线性同余方程求解" class="headerlink" title="EXGCD(线性同余方程求解)"></a>EXGCD(线性同余方程求解)</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//裴蜀定理：设a,b是不全为零的整数，则一定存在x,y使得ax+by=gcd(a,b)</span></span><br><span class="line"><span class="comment">//ax+by=gcd(a,b)  gcd(a,b)=d;</span></span><br><span class="line"><span class="comment">//线性同余方程ax=c(mod b) -&gt; ax+by=c (x,y未知)，线性同余方程有解的条件： gcd(a,b)|c</span></span><br><span class="line"><span class="comment">//注意扩欧exgcd(a,b,x,y)求出来的是方程ax+by=gcd(a,b)的一组解</span></span><br><span class="line"><span class="comment">//若x0是方程ax+by=c(或者说ax=c(mod b))的一个解，令g=gcd(a,b);</span></span><br><span class="line"><span class="comment">//则该方程的任意解x,y可表示为x=x0+k(b/g)，y=y0-k(a/g) 对于任意整数k成立</span></span><br><span class="line"><span class="comment">//此时方程的最小整数解x=(x0%t+t)%t t=b/g</span></span><br><span class="line"><span class="comment">//注意这里说的，无论是通解和特解，这组x0,y0都是指ax0+by0=gcd(a,b)的解，扩欧永远算出来的是这个方程的某组解</span></span><br><span class="line"><span class="function">ll <span class="title">exgcd</span><span class="params">(ll a,ll b,ll &amp;x,ll &amp;y)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(b==<span class="number">0</span>)&#123;</span><br><span class="line">        x=<span class="number">1</span>,y=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> a;</span><br><span class="line">    &#125;</span><br><span class="line">    ll d=<span class="built_in">exgcd</span>(b,a%b,x,y);</span><br><span class="line">    ll t=x;</span><br><span class="line">    x=y,y=t-(a/b)*y;</span><br><span class="line">    <span class="keyword">return</span> d;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="区间互质"><a href="#区间互质" class="headerlink" title="区间互质"></a>区间互质</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//小常数</span></span><br><span class="line">vector&lt;<span class="type">int</span>&gt;prime;</span><br><span class="line"><span class="type">int</span> num = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">pr</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">    prime.<span class="built_in">clear</span>();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i * i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (n % i == <span class="number">0</span>) &#123;</span><br><span class="line">            prime.<span class="built_in">push_back</span>(i);</span><br><span class="line">            <span class="keyword">while</span> (n % i == <span class="number">0</span>)n /= i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (n &gt; <span class="number">1</span>)prime.<span class="built_in">push_back</span>(n);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> pos, <span class="type">int</span> mul, <span class="type">int</span> len)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (pos == prime.<span class="built_in">size</span>()) &#123;</span><br><span class="line">        <span class="keyword">if</span> (len) &#123;</span><br><span class="line">            <span class="keyword">if</span> (len % <span class="number">2</span>)sum += num / mul;</span><br><span class="line">            <span class="keyword">else</span> sum -= num / mul;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">dfs</span>(pos + <span class="number">1</span>, mul, len);</span><br><span class="line">    <span class="built_in">dfs</span>(pos + <span class="number">1</span>, mul * prime[pos], len + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">que</span><span class="params">(<span class="type">int</span> L, <span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">    num = L; sum = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">dfs</span>(<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">return</span> L - sum;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">que</span><span class="params">(<span class="type">int</span> L, <span class="type">int</span> R, <span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">pr</span>(k);</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">que</span>(R, k) - <span class="built_in">que</span>(L - <span class="number">1</span>, k);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">namespace</span> qjhz &#123;</span><br><span class="line">    ll T, N, cnt;     <span class="comment">//cnt表示质因子个数</span></span><br><span class="line">    ll A, B;</span><br><span class="line">   ll p[<span class="number">100</span>];</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">prime</span><span class="params">(ll n)</span> </span>&#123;          <span class="comment">//算出n的质因子</span></span><br><span class="line">        cnt = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (ll i = <span class="number">2</span>; i*i &lt;= n; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> ((n%i) == <span class="number">0</span>) &#123;</span><br><span class="line">                cnt++;</span><br><span class="line">                p[cnt] = i;</span><br><span class="line">                <span class="keyword">while</span> ((n%i) == <span class="number">0</span>) &#123;</span><br><span class="line">                    n /= i;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (n &gt; <span class="number">1</span>) &#123;</span><br><span class="line">            cnt++;</span><br><span class="line">            p[cnt] = n;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">ll <span class="title">solve</span><span class="params">(ll r, ll n)</span> </span>&#123;          <span class="comment">//1到r区间内与n互质的数的个数</span></span><br><span class="line">        <span class="built_in">prime</span>(n);                   <span class="comment">//分解n的质因子,比如n=2*3</span></span><br><span class="line">        ll res = <span class="number">0</span>;                 <span class="comment">//那么区间中2的倍数和3的倍数都不会和n互质,但是我们在减去的时候会多减去6的倍数,要容斥一下</span></span><br><span class="line">        <span class="keyword">for</span> (ll i = <span class="number">1</span>; i &lt; (<span class="number">1</span> &lt;&lt; cnt); i++) &#123;  <span class="comment">//简单来说就是用k的质因子筛去区间内不与k互质的数</span></span><br><span class="line">            ll kk = <span class="number">0</span>;</span><br><span class="line">            ll div = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span> (ll j = <span class="number">1</span>; j &lt;= cnt; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (i&amp;(<span class="number">1</span> &lt;&lt; (j - <span class="number">1</span>))) &#123;</span><br><span class="line">                    kk++;</span><br><span class="line">                    div *= p[j];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (kk % <span class="number">2</span>)</span><br><span class="line">                res += r / div;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                res -= r / div;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> r - res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">ll <span class="title">que</span><span class="params">(ll L, ll R, ll k)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">solve</span>(R, k) - <span class="built_in">solve</span>(L - <span class="number">1</span>, k);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="欧拉函数欧拉降幂"><a href="#欧拉函数欧拉降幂" class="headerlink" title="欧拉函数欧拉降幂"></a>欧拉函数欧拉降幂</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 指数取模的三种降幂方法</span></span><br><span class="line"><span class="comment">// 1.条件：p为质数,a!=0    a^(p-1)=1 (mod p) -&gt; a^b=a^(b mod (p-1)) (mod p)</span></span><br><span class="line"><span class="comment">// 2.条件：gcd(a,m)=1  a^phi(m)=1 (mod m) -&gt; a^b=a^(b mod phi(m)) (mod m)</span></span><br><span class="line"><span class="comment">// 3.无条件  若b&lt;phi(m) a^b=a^b (mod m) 若b&gt;=phi(m) a^b=a^(b mod phi(m) + phi(m)) (mod m)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//求n的欧拉函数</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">euler_phi</span><span class="params">(<span class="type">int</span> n)</span></span>&#123;</span><br><span class="line">  <span class="type">int</span> ans=n;</span><br><span class="line">  <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>;i*i&lt;=n;i++)</span><br><span class="line">    <span class="keyword">if</span>(n%i==<span class="number">0</span>)&#123;</span><br><span class="line">      ans=ans/i*(i<span class="number">-1</span>);</span><br><span class="line">      <span class="keyword">while</span>(n%i==<span class="number">0</span>) n/=i;</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="keyword">if</span>(n&gt;<span class="number">1</span>) ans=ans/n*(n<span class="number">-1</span>);</span><br><span class="line">  <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//线性筛求欧拉函数</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">2e5</span>+<span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> is_prime[N],prime[N],phi[N],cnt;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">euler_phi</span><span class="params">(<span class="type">int</span> n)</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">is_prime[i]=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">is_prime[<span class="number">1</span>]=<span class="number">0</span>;</span><br><span class="line">phi[<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(is_prime[i])&#123;</span><br><span class="line">prime[++cnt]=i;</span><br><span class="line">phi[i]=i<span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=cnt&amp;&amp;i*prime[j]&lt;=n;j++)&#123;</span><br><span class="line">is_prime[i*prime[j]]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(i%prime[j])&#123;</span><br><span class="line">phi[i*prime[j]]=phi[i]*phi[prime[j]];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">phi[i*prime[j]]=phi[i]*prime[j];</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="拓扑排序（判环）"><a href="#拓扑排序（判环）" class="headerlink" title="拓扑排序（判环）"></a>拓扑排序（判环）</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">初始状态下，集合 S 装着所有入度为 0 的点，L 是一个空列表。</span></span><br><span class="line"><span class="comment">每次从 S 中取出一个点 u（可以随便取）放入 L, 然后将 u 的所有边 (u, v_1), (u, v_2), (u, v_3) \cdots 删除。对于边 (u, v)，若将该边删除后点 v 的入度变为 0，则将 v 放入 S 中。</span></span><br><span class="line"><span class="comment">不断重复以上过程，直到集合 S 为空。检查图中是否存在任何边，如果有，那么这个图一定有环路，否则返回 L，L 中顶点的顺序就是构造拓扑序列的结果。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; G[MAXN];</span><br><span class="line"><span class="type">int</span> in[MAXN];  <span class="comment">// 存储每个结点的入度</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">toposort</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  vector&lt;<span class="type">int</span>&gt; L;</span><br><span class="line">  queue&lt;<span class="type">int</span>&gt; S;</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    <span class="keyword">if</span> (in[i] == <span class="number">0</span>) S.<span class="built_in">push</span>(i);</span><br><span class="line">  <span class="keyword">while</span> (!S.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">    <span class="type">int</span> u = S.<span class="built_in">front</span>();</span><br><span class="line">    S.<span class="built_in">pop</span>();</span><br><span class="line">    L.<span class="built_in">push_back</span>(u);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> v : G[u]) &#123;</span><br><span class="line">      <span class="keyword">if</span> (--in[v] == <span class="number">0</span>) &#123;</span><br><span class="line">        S.<span class="built_in">push</span>(v);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (L.<span class="built_in">size</span>() == n) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> i : L) cout &lt;&lt; i &lt;&lt; <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="二分图染色"><a href="#二分图染色" class="headerlink" title="二分图染色"></a>二分图染色</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//通俗的说 一个无向图中，把所有的点分成两部分（集合）</span></span><br><span class="line"><span class="comment">//使同一部分（集合）的点不直接相连，不同部分（集合）的点直接相连，这样的图叫做二分图。</span></span><br><span class="line"><span class="comment">//无向图 G 为二分图的充分必要条件：G 至少有两个顶点，且其所有回路的长度均为偶数。</span></span><br><span class="line"><span class="comment">//二分图必不存在奇环，非二分图必存在奇环</span></span><br><span class="line"><span class="comment">//O(n+m)</span></span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">1e5</span>+<span class="number">5</span>;</span><br><span class="line">VI g[N];</span><br><span class="line"><span class="type">int</span> color[N];   <span class="comment">//0表示没染色,1表示黑,2表示白</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">bipartite</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> col)</span></span>&#123;</span><br><span class="line">color[x]=col;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> &amp;out:g[x])&#123;</span><br><span class="line"><span class="keyword">if</span>(!color[out])&#123;</span><br><span class="line"><span class="keyword">if</span>(!<span class="built_in">bipartite</span>(out,<span class="number">3</span>-col))</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(color[out]==col)&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> n,m,u,v;</span><br><span class="line">cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line"><span class="built_in">rep</span>(i,<span class="number">1</span>,m)&#123;</span><br><span class="line">cin&gt;&gt;u&gt;&gt;v;</span><br><span class="line">g[u].<span class="built_in">pb</span>(v);</span><br><span class="line">g[v].<span class="built_in">pb</span>(u);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> ok=<span class="number">1</span>;</span><br><span class="line"><span class="built_in">rep</span>(i,<span class="number">1</span>,n)&#123;</span><br><span class="line"><span class="keyword">if</span>(!color[i])&#123;</span><br><span class="line"><span class="keyword">if</span>(!<span class="built_in">bipartite</span>(i,<span class="number">1</span>))&#123;</span><br><span class="line">ok=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(ok)&#123;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;Yes\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;No\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="边权下放点权树剖"><a href="#边权下放点权树剖" class="headerlink" title="边权下放点权树剖"></a>边权下放点权树剖</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll int</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> endl <span class="string">&#x27;\n&#x27;</span></span></span><br><span class="line"><span class="type">const</span> ll N=<span class="number">2e5</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">ty</span>&#123;</span><br><span class="line">ll t,l,next;</span><br><span class="line">&#125;edge[N&lt;&lt;<span class="number">1</span>];</span><br><span class="line">ll cn=<span class="number">0</span>;</span><br><span class="line">ll n,k;</span><br><span class="line"><span class="type">char</span> op;</span><br><span class="line">ll aa,b,c,rt;</span><br><span class="line">ll head[N];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add_edge</span><span class="params">(ll a,ll b,ll c)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">edge[++cn].t=b;</span><br><span class="line">edge[cn].l=c;</span><br><span class="line">edge[cn].next=head[a];</span><br><span class="line">head[a]=cn;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">tree</span></span><br><span class="line">&#123;</span><br><span class="line">ll l,r;</span><br><span class="line">ll val;</span><br><span class="line">ll add;<span class="comment">//lazy</span></span><br><span class="line">ll siz;</span><br><span class="line">&#125;tr[N&lt;&lt;<span class="number">2</span>];</span><br><span class="line">ll dep[N];<span class="comment">//深度</span></span><br><span class="line">ll fa[N],son[N];</span><br><span class="line">ll siz[N];</span><br><span class="line">ll mas[N],a[N];<span class="comment">//初始序列，处理后的序列</span></span><br><span class="line">ll cnt=<span class="number">0</span>;<span class="comment">//dfs序的时间戳</span></span><br><span class="line">ll top[N];<span class="comment">//所在链的顶端</span></span><br><span class="line">ll idx[N];</span><br><span class="line">ll x[N];</span><br><span class="line">ll y[N];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">init_dfs</span><span class="params">(ll id,ll p,ll depth)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">dep[id]=depth;</span><br><span class="line">fa[id]=p;</span><br><span class="line">siz[id]=<span class="number">1</span>;</span><br><span class="line">ll son_val=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=head[id];i!=<span class="number">-1</span>;i=edge[i].next)</span><br><span class="line">&#123;</span><br><span class="line">ll y=edge[i].t;</span><br><span class="line"><span class="keyword">if</span>(y==p) <span class="keyword">continue</span>;</span><br><span class="line"><span class="comment">//a[y]=edge[i].l; 如果初始边权不为0，点权下放边权时要执行这一句操作 </span></span><br><span class="line"><span class="built_in">init_dfs</span>(y,id,depth+<span class="number">1</span>);</span><br><span class="line">siz[id]+=siz[y];</span><br><span class="line"><span class="keyword">if</span>(siz[y]&gt;son_val)</span><br><span class="line">&#123;</span><br><span class="line">son_val=siz[y];</span><br><span class="line">son[id]=y;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125; </span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs2</span><span class="params">(ll id,ll p)</span></span></span><br><span class="line"><span class="function"></span>&#123;<span class="comment">//更新链上的情况 </span></span><br><span class="line">idx[id]=++cnt;</span><br><span class="line">a[cnt]=mas[id];</span><br><span class="line">top[id]=p;</span><br><span class="line"><span class="keyword">if</span>(!son[id]) <span class="keyword">return</span>;</span><br><span class="line"><span class="built_in">dfs2</span>(son[id],p);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=head[id];i!=<span class="number">-1</span>;i=edge[i].next)</span><br><span class="line">&#123;</span><br><span class="line">ll y=edge[i].t;</span><br><span class="line"><span class="comment">//if(y==p||y==son[id]) continue;</span></span><br><span class="line"><span class="keyword">if</span>(!idx[y]) <span class="built_in">dfs2</span>(y,y);<span class="comment">//新的链 </span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">push_up</span><span class="params">(ll p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">tr[p].val+=tr[p&lt;&lt;<span class="number">1</span>].val+tr[p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].val;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">build</span><span class="params">(ll p,ll l,ll r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">tr[p].l=l;tr[p].r=r;tr[p].siz=r-l+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(l==r)</span><br><span class="line">&#123;</span><br><span class="line">tr[p].val=a[l];</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">ll mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="built_in">build</span>(p&lt;&lt;<span class="number">1</span>,l,mid);</span><br><span class="line"><span class="built_in">build</span>(p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,mid+<span class="number">1</span>,r);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">push_down</span><span class="params">(ll p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(tr[p].add==<span class="number">0</span>) <span class="keyword">return</span>;</span><br><span class="line">tr[p&lt;&lt;<span class="number">1</span>].val+=tr[p&lt;&lt;<span class="number">1</span>].siz*tr[p].add;</span><br><span class="line">tr[p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].val+=tr[p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].siz*tr[p].add;</span><br><span class="line">tr[p&lt;&lt;<span class="number">1</span>].add+=tr[p].add;</span><br><span class="line">tr[p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].add+=tr[p].add;</span><br><span class="line">tr[p].add=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(ll p,ll l,ll r,ll val)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(tr[p].l&gt;=l&amp;&amp;tr[p].r&lt;=r)</span><br><span class="line">&#123;</span><br><span class="line">tr[p].val+=tr[p].siz*val;</span><br><span class="line">tr[p].add+=val;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">push_down</span>(p);</span><br><span class="line">ll mid=(tr[p].l+tr[p].r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(l&lt;=mid) <span class="built_in">add</span>(p&lt;&lt;<span class="number">1</span>,l,r,val);</span><br><span class="line"><span class="keyword">if</span>(r&gt;mid) <span class="built_in">add</span>(p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,l,r,val);</span><br><span class="line"><span class="built_in">push_up</span>(p);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">sum</span><span class="params">(ll p,ll l,ll r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ll ans=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(tr[p].l&gt;=l&amp;&amp;tr[p].r&lt;=r)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> tr[p].val;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">push_down</span>(p);</span><br><span class="line">ll mid=(tr[p].l+tr[p].r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(l&lt;=mid) ans+=<span class="built_in">sum</span>(p&lt;&lt;<span class="number">1</span>,l,r);</span><br><span class="line"><span class="keyword">if</span>(r&gt;mid) ans+=<span class="built_in">sum</span>(p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,l,r);</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">tree_sum</span><span class="params">(ll x,ll y)</span><span class="comment">//直接相连两点之间的边权</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ll ans=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(top[x]!=top[y])</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(dep[top[x]]&lt;dep[top[y]]) <span class="built_in">swap</span>(x,y);</span><br><span class="line">ans+=<span class="built_in">sum</span>(<span class="number">1</span>,idx[top[x]],idx[x]);</span><br><span class="line">x=fa[top[x]];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(dep[x]&gt;dep[y]) <span class="built_in">swap</span>(x,y);</span><br><span class="line">ans+=<span class="built_in">sum</span>(<span class="number">1</span>,idx[x]+<span class="number">1</span>,idx[y]);<span class="comment">//点权下放边权操作核心代码，lca不查询，所以y要+1 </span></span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">tree_add</span><span class="params">(ll x,ll y,ll val)</span><span class="comment">//两点之间的所有便增加权值val</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">while</span>(top[x]!=top[y])</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(dep[top[x]]&lt;dep[top[y]]) <span class="built_in">swap</span>(x,y);</span><br><span class="line"><span class="built_in">add</span>(<span class="number">1</span>,idx[top[x]],idx[x],val); </span><br><span class="line">x=fa[top[x]];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(dep[x]&gt;dep[y]) <span class="built_in">swap</span>(x,y);</span><br><span class="line"><span class="built_in">add</span>(<span class="number">1</span>,idx[x]+<span class="number">1</span>,idx[y],val);<span class="comment">//同上一句注释 </span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">trson_add</span><span class="params">(ll x,ll val)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">add</span>(<span class="number">1</span>,idx[x],idx[x]+siz[x]<span class="number">-1</span>,val);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">trson_sum</span><span class="params">(ll x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">sum</span>(<span class="number">1</span>,idx[x],idx[x]+siz[x]<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cin&gt;&gt;n&gt;&gt;k;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;n;++i)</span><br><span class="line">&#123;</span><br><span class="line">cin&gt;&gt;aa&gt;&gt;b;</span><br><span class="line"><span class="built_in">add_edge</span>(aa,b,<span class="number">0</span>);</span><br><span class="line"><span class="built_in">add_edge</span>(b,aa,<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">init_dfs</span>(rt,<span class="number">0</span>,<span class="number">1</span>);</span><br><span class="line"><span class="built_in">dfs2</span>(rt,rt);</span><br><span class="line"><span class="built_in">build</span>(<span class="number">1</span>,<span class="number">1</span>,n);</span><br><span class="line"><span class="keyword">while</span>(k--)</span><br><span class="line">&#123;</span><br><span class="line">cin&gt;&gt;aa&gt;&gt;b;</span><br><span class="line"><span class="built_in">tree_add</span>(aa,b,<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> ans=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;n;++i)</span><br><span class="line">&#123;</span><br><span class="line">ans=<span class="built_in">max</span>(ans,<span class="built_in">tree_sum</span>(x[i],y[i]));</span><br><span class="line">&#125;</span><br><span class="line">cout&lt;&lt;ans&lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);cin.<span class="built_in">tie</span>(<span class="number">0</span>);cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line"><span class="built_in">memset</span>(head,<span class="number">-1</span>,<span class="keyword">sizeof</span> head);</span><br><span class="line">rt=<span class="number">1</span>;</span><br><span class="line"><span class="built_in">solve</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="二分相关"><a href="#二分相关" class="headerlink" title="二分相关"></a>二分相关</h2><p>lower_bound()函数是用来求一个容器中，第一个大于等于所要查找的元素的地址，具体的原理是二分查找，因此它只能用于<strong>非降序序列</strong>。<br>他有三个参数，第一个参数是容器的初始地址，第二个参数是容器的末尾位置，第三个参数是所要查找的元素值。<br>返回值是第一个大于等于所要查找的元素的地址。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">vector&lt;<span class="type">int</span>&gt; v;</span><br><span class="line">v.<span class="built_in">push_back</span>(<span class="number">1</span>), v.<span class="built_in">push_back</span>(<span class="number">2</span>), v.<span class="built_in">push_back</span>(<span class="number">3</span>);</span><br><span class="line"><span class="comment">//打印 2 的位置</span></span><br><span class="line">cout &lt;&lt; <span class="built_in">lower_bound</span>(v.<span class="built_in">begin</span>(), v.<span class="built_in">end</span>(), <span class="number">2</span>) - v.<span class="built_in">begin</span>();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> a[] = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;;</span><br><span class="line"><span class="comment">//打印 2 的位置</span></span><br><span class="line">cout &lt;&lt; <span class="built_in">lower_bound</span>(a, a + <span class="number">3</span>, <span class="number">2</span>) - a;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> a[<span class="number">5</span>] = &#123; <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span> &#125;;</span><br><span class="line"><span class="comment">//从 a 数组中找到第一个大于 3 的元素</span></span><br><span class="line"><span class="type">int</span> *p = <span class="built_in">upper_bound</span>(a, a + <span class="number">5</span>, <span class="number">3</span>);</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;*p = &quot;</span> &lt;&lt; *p &lt;&lt; endl;</span><br></pre></td></tr></table></figure><p>二分查找的下界 查找第一个等于目标值的元素</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">binarySearch</span><span class="params">(<span class="type">int</span>* a, <span class="type">int</span> n, <span class="type">int</span> value)</span> </span>&#123;</span><br><span class="line">  <span class="type">int</span> low = <span class="number">0</span>;</span><br><span class="line">  <span class="type">int</span> high = n - <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">while</span> (low &lt;= high) &#123;</span><br><span class="line">    <span class="type">int</span> mid =  low + (high - low)/<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span> (a[mid] &gt; value) &#123;</span><br><span class="line">      high = mid - <span class="number">1</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (a[mid] &lt; value) &#123;</span><br><span class="line">      low = mid + <span class="number">1</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> ((mid == <span class="number">0</span>) || (a[mid - <span class="number">1</span>] != value)) </span><br><span class="line">        <span class="keyword">return</span> mid;</span><br><span class="line">      <span class="keyword">else</span> </span><br><span class="line">        high = mid - <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>二分查找的上界 查找最后一个等于目标值的元素</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">binarySearch</span><span class="params">(<span class="type">int</span>* a, <span class="type">int</span> n, <span class="type">int</span> value)</span> </span>&#123;</span><br><span class="line">  <span class="type">int</span> low = <span class="number">0</span>;</span><br><span class="line">  <span class="type">int</span> high = n - <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">while</span> (low &lt;= high) &#123;</span><br><span class="line">    <span class="type">int</span> mid =  low + (high - low)/<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span> (a[mid] &gt; value) &#123;</span><br><span class="line">      high = mid - <span class="number">1</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (a[mid] &lt; value) &#123;</span><br><span class="line">      low = mid + <span class="number">1</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> ((mid == n<span class="number">-1</span>) || (a[mid + <span class="number">1</span>] != value)) </span><br><span class="line">        <span class="keyword">return</span> mid;</span><br><span class="line">      <span class="keyword">else</span> </span><br><span class="line">        low = mid + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>查找第一个大于等于目标值的元素</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">binarySearch</span><span class="params">(<span class="type">int</span>* a, <span class="type">int</span> n, <span class="type">int</span> value)</span> </span>&#123;</span><br><span class="line">  <span class="type">int</span> low = <span class="number">0</span>;</span><br><span class="line">  <span class="type">int</span> high = n - <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">while</span> (low &lt;= high) &#123;</span><br><span class="line">    <span class="type">int</span> mid = low + (high - low)/<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span> (a[mid] &gt;= value) &#123;</span><br><span class="line">      <span class="keyword">if</span> ((mid == <span class="number">0</span>) || (a[mid - <span class="number">1</span>] &lt; value)) </span><br><span class="line">        <span class="keyword">return</span> mid;</span><br><span class="line">      <span class="keyword">else</span> </span><br><span class="line">        high = mid <span class="number">-1</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span>&#123;</span><br><span class="line">      low = mid + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>查找最后一个小于等于目标值的元素</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">binarySearch</span><span class="params">(<span class="type">int</span>* a, <span class="type">int</span> n, <span class="type">int</span> value)</span> </span>&#123;</span><br><span class="line">  <span class="type">int</span> low = <span class="number">0</span>;</span><br><span class="line">  <span class="type">int</span> high = n - <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">while</span> (low &lt;= high) &#123;</span><br><span class="line">    <span class="type">int</span> mid = low + (high - low)/<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span> (a[mid] &lt;= value) &#123;</span><br><span class="line">      <span class="keyword">if</span> ((mid == n<span class="number">-1</span>) || (a[mid + <span class="number">1</span>] &gt; value)) </span><br><span class="line">        <span class="keyword">return</span> mid;</span><br><span class="line">      <span class="keyword">else</span> </span><br><span class="line">        low = mid + <span class="number">1</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span>&#123;</span><br><span class="line">      high = mid - <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="mex"><a href="#mex" class="headerlink" title="mex"></a>mex</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//mex(S) 的值为集合 S 中没有出现过的最小自然数。例如,mex(&#123;1,2&#125;) = 0、mex(&#123;0,1,2,3&#125;) = 4</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">mex</span><span class="params">(<span class="keyword">auto</span> v)</span> <span class="comment">// v可以是vector、set等容器 </span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    unordered_set&lt;<span class="type">int</span>&gt; S;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> e : v)</span><br><span class="line">        S.<span class="built_in">insert</span>(e);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>;; ++i)</span><br><span class="line">        <span class="keyword">if</span> (S.<span class="built_in">find</span>(i) == S.<span class="built_in">end</span>())</span><br><span class="line">            <span class="keyword">return</span> i;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/undefined/16107.html"/>
      <url>/undefined/16107.html</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
    
    
    <entry>
      <title>牛客多校</title>
      <link href="/tags/index-1.html"/>
      <url>/tags/index-1.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>杭电多校</title>
      <link href="/tags/index.html"/>
      <url>/tags/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
  
</search>
